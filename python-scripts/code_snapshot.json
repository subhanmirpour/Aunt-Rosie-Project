{
  "App.css": "#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n",
  "App.jsx": "import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport Products from './pages/Products';\nimport Ingredients from './pages/Ingredients';\nimport SalesForm from './pages/SalesForm';\nimport About from './pages/About';\nimport Unauthorized from './pages/Unauthorized';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport SalesTracker from './pages/SalesTracker';\nimport Footer from './components/Footer';\nimport UserManagement from './pages/UserManagement';\nimport Timetable from './pages/Timetable';\nimport LabelGeneration from './pages/LabelGeneration';\n\nimport {\n  HomeIcon,\n  ShoppingCartIcon,\n  CubeIcon,\n  CurrencyDollarIcon,\n  UserIcon,\n  ClockIcon,\n  TagIcon,\n} from '@heroicons/react/24/outline';\n\nfunction NavLink({ to, icon: Icon, children }) {\n  const location = useLocation();\n  const isActive = location.pathname === to;\n\n  return (\n    <Link\n      to={to}\n      className={`flex items-center gap-2 px-3 py-2 rounded-md transition-colors ${isActive\n          ? 'text-primary-700 bg-primary-50'\n          : 'text-gray-600 hover:text-primary-600 hover:bg-gray-50'\n        }`}\n    >\n      <Icon className=\"h-5 w-5\" />\n      {children}\n    </Link>\n  );\n}\n\nfunction LogoutButton() {\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    localStorage.removeItem('user');\n    navigate('/');\n  };\n\n  return (\n    <button\n      onClick={handleLogout}\n      className=\"ml-auto text-sm bg-rose-600 hover:bg-rose-700 text-white px-3 py-1 rounded\"\n    >\n      Logout\n    </button>\n  );\n}\n\nfunction Layout() {\n  const location = useLocation();\n  const isLoginPage = location.pathname === '/';\n  const isLoggedIn = !!localStorage.getItem('user');\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      {/* Header / Navigation */}\n      {!isLoginPage && (\n        <div className=\"bg-white shadow px-4 mb-4\">\n          <div className=\"max-w-8xl mx-auto flex items-center justify-between h-16 px-4\">\n            {/* Centered navigation links */}\n            <div className=\"flex space-x-2 justify-center flex-grow\">\n              <NavLink to=\"/dashboard\" icon={HomeIcon}>Dashboard</NavLink>\n              <NavLink to=\"/products\" icon={ShoppingCartIcon}>Products</NavLink>\n              <NavLink to=\"/ingredients\" icon={CubeIcon}>Ingredients</NavLink>\n              <NavLink to=\"/sales\" icon={CurrencyDollarIcon}>Sales</NavLink>\n              <NavLink to=\"/sales-tracker\" icon={CurrencyDollarIcon}>Sales Tracker</NavLink>\n              <NavLink to=\"/usermanagement\" icon={UserIcon}>User Management</NavLink>\n              <NavLink to=\"/timetable\" icon={ClockIcon}>Time Table</NavLink>\n              <NavLink to=\"/labelgeneration\" icon={TagIcon}>Label Generation</NavLink>\n              <NavLink to=\"/about\" icon={UserIcon}>About</NavLink>\n            </div>\n            {/* Logout button aligned to the right */}\n            {isLoggedIn && <LogoutButton />}\n          </div>\n\n        </div>\n      )}\n\n      {/* Main content */}\n      <main className=\"flex-grow\">\n        <Routes>\n          <Route path=\"/\" element={<Login />} />\n          <Route\n            path=\"/dashboard\"\n            element={\n              <ProtectedRoute>\n                <Dashboard />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/products\"\n            element={\n              <ProtectedRoute role=\"admin\">\n                <Products />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/ingredients\"\n            element={\n              <ProtectedRoute role=\"kitchen\">\n                <Ingredients />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/sales\"\n            element={\n              <ProtectedRoute role=\"sales\">\n                <SalesForm />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/sales-tracker\"\n            element={\n              <ProtectedRoute>\n                <SalesTracker />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/usermanagement\"\n            element={\n              <ProtectedRoute role=\"admin\">\n                <UserManagement />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/timetable\"\n            element={\n              <ProtectedRoute>\n                <Timetable />\n              </ProtectedRoute>\n            }\n          />\n          <Route\n            path=\"/labelgeneration\"\n            element={\n              <ProtectedRoute role=\"admin\">\n                <LabelGeneration />\n              </ProtectedRoute>\n            }\n          />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/unauthorized\" element={<Unauthorized />} />\n        </Routes>\n      </main>\n\n      {/* Footer always stays at the bottom */}\n      {!isLoginPage && <Footer />}\n    </div>\n  );\n}\n\n\nfunction App() {\n  return (\n    <Router>\n      <Layout />\n    </Router>\n  );\n}\n\nexport default App;\n",
  "index.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",
  "main.jsx": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n)\n",
  "components/AddIngredientModal.jsx": "import Modal from './Modal';\nimport IngredientForm from './IngredientForm';\n\nconst AddIngredientModal = ({ isOpen, onClose, onSubmit, isLoading }) => {\n  const handleSubmit = (data) => {\n    if (data === null) {\n      onClose();\n    } else {\n      onSubmit(data);\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Add New Ingredient\"\n    >\n      <IngredientForm\n        onSubmit={handleSubmit}\n        onCancel={onClose}\n        isLoading={isLoading}\n        submitLabel=\"Add Ingredient\"\n      />\n    </Modal>\n  );\n};\n\nexport default AddIngredientModal; ",
  "components/AddProductModal.jsx": "import ProductForm from './ProductForm';\n\nconst AddProductModal = ({ isOpen, onClose, onAdd, isLoading }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Add New Product</h3>\n        <ProductForm\n          onSubmit={onAdd}\n          onCancel={onClose}\n          isLoading={isLoading}\n          submitLabel=\"Add Product\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AddProductModal; ",
  "components/AlertModal.jsx": "import React from 'react';\nimport { ExclamationTriangleIcon } from '@heroicons/react/24/outline';\n\nexport default function AlertModal({ isOpen, onClose, title, message, confirmText = 'OK', onConfirm, showCancel = false }) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <ExclamationTriangleIcon className=\"h-6 w-6 text-rose-600\" />\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n        </div>\n        \n        <p className=\"text-gray-600 mb-6\">{message}</p>\n\n        <div className=\"flex justify-end gap-3\">\n          {showCancel && (\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500\"\n            >\n              Cancel\n            </button>\n          )}\n          <button\n            onClick={onConfirm || onClose}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-rose-600 border border-transparent rounded-md hover:bg-rose-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500\"\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n} ",
  "components/CustomerSearch.jsx": "import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport { supabase } from '../lib/supabase/supabaseClient';\nimport debounce from 'lodash/debounce';\n\nexport default function CustomerSearch({ value, onChange, className = '' }) {\n  const [options, setOptions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n  // Fetch selected customer details when value changes\n  useEffect(() => {\n    if (value?.value) {\n      const fetchCustomer = async () => {\n        const { data, error } = await supabase\n          .from('customers')\n          .select('customerid, firstname, lastname')\n          .eq('customerid', value.value)\n          .single();\n\n        if (!error && data) {\n          setSelectedCustomer({\n            value: data.customerid,\n            label: `${data.firstname} ${data.lastname}`\n          });\n        }\n      };\n      fetchCustomer();\n    } else {\n      setSelectedCustomer(null);\n    }\n  }, [value]);\n\n  const searchCustomers = debounce(async (inputValue) => {\n    if (!inputValue) {\n      setOptions([]);\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('customers')\n        .select('customerid, firstname, lastname')\n        .or(`firstname.ilike.%${inputValue}%,lastname.ilike.%${inputValue}%`)\n        .limit(5);\n\n      if (error) throw error;\n\n      const formattedOptions = data.map(customer => ({\n        value: customer.customerid,\n        label: `${customer.firstname} ${customer.lastname}`\n      }));\n\n      setOptions(formattedOptions);\n    } catch (error) {\n      console.error('Error searching customers:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, 300);\n\n  const handleInputChange = (inputValue) => {\n    searchCustomers(inputValue);\n  };\n\n  return (\n    <div className={className}>\n      <Select\n        value={selectedCustomer}\n        onChange={onChange}\n        onInputChange={handleInputChange}\n        options={options}\n        isLoading={isLoading}\n        placeholder=\"Start typing a name...\"\n        isClearable\n        className=\"react-select-container\"\n        classNamePrefix=\"react-select\"\n        noOptionsMessage={() => \"No customers found\"}\n      />\n      {!value && (\n        <button\n          type=\"button\"\n          className=\"mt-2 text-sm text-rose-600 hover:text-rose-700\"\n        >\n          Customer not listed? Add a new customer\n        </button>\n      )}\n    </div>\n  );\n} ",
  "components/EditIngredientModal.jsx": "import Modal from './Modal';\nimport IngredientForm from './IngredientForm';\n\nconst EditIngredientModal = ({ isOpen, onClose, onSubmit, isLoading, ingredient }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Edit Ingredient\"\n      size=\"lg\"\n    >\n      <div className=\"p-6\">\n        <IngredientForm\n          initialData={ingredient}\n          onSubmit={onSubmit}\n          onCancel={onClose}\n          isLoading={isLoading}\n          submitLabel=\"Save Changes\"\n        />\n      </div>\n    </Modal>\n  );\n};\n\nexport default EditIngredientModal; ",
  "components/ErrorBoundary.jsx": "import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-4 border border-red-300 rounded-md bg-red-50\">\n          <h2 className=\"text-red-800 font-semibold mb-2\">Something went wrong</h2>\n          <p className=\"text-red-600 text-sm\">\n            {this.state.error?.message || 'An unexpected error occurred'}\n          </p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary; ",
  "components/Footer.jsx": "// src/components/Footer.jsx\nimport { FaFacebook, FaInstagram, FaTwitter } from 'react-icons/fa';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-rose-50 border-t border-rose-100 mt-20\">\n      {/* Main footer content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-6 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n        {/* Left: Copyright */}\n        <div className=\"text-center\">\n          \u00a9 {new Date().getFullYear()} Aunt Rosie\u2019s. All rights reserved.\n        </div>\n        {/* Center: Navigation Links */}\n        <div className=\"flex justify-center gap-6\">\n          <a href=\"/dashboard\" className=\"hover:underline\">Dashboard</a>\n          <a href=\"/sales\" className=\"hover:underline\">Sales</a>\n          <a href=\"/products\" className=\"hover:underline\">Products</a>\n        </div>\n        {/* Right: Social Icons */}\n        <div className=\"flex justify-center gap-4 text-rose-500\">\n          <a href=\"https://instagram.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FaInstagram className=\"w-5 h-5 hover:text-rose-700\" />\n          </a>\n          <a href=\"https://facebook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FaFacebook className=\"w-5 h-5 hover:text-rose-700\" />\n          </a>\n          <a href=\"https://twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <FaTwitter className=\"w-5 h-5 hover:text-rose-700\" />\n          </a>\n        </div>\n      </div>\n\n      {/* Secondary footer: review link */}\n      <div className=\"border-t border-rose-100\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4 text-center text-xs text-rose-400\">\n          \ud83d\udcac <a \n              href=\"https://www.google.com/maps/place/Aunt+Rosie/reviews\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\" \n              className=\"underline hover:text-rose-600\"\n            >\n            Leave us a review!\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n}\n",
  "components/IngredientForm.jsx": "import { useState, useEffect } from 'react';\n\nconst initialFormData = {\n  ingredientname: '',\n  unitofmeasure: '',\n  currentstock: '',\n  reorderthreshold: '',\n  costperunit: '',\n  notes: ''\n};\n\nconst tooltips = {\n  ingredientname: 'Enter the name of the ingredient (2-100 characters)',\n  unitofmeasure: 'Unit of measurement (e.g., kg, g, L, ml)',\n  currentstock: 'Current quantity in stock (whole numbers only)',\n  reorderthreshold: 'Minimum quantity before reorder is needed (whole numbers only)',\n  costperunit: 'Cost per unit in dollars (up to 2 decimal places)',\n  notes: 'Additional notes about the ingredient (optional)'\n};\n\nconst IngredientForm = ({ initialData, onSubmit, onCancel, isLoading, submitLabel = 'Submit' }) => {\n  const [formData, setFormData] = useState(initialData || initialFormData);\n  const [errors, setErrors] = useState({});\n  const [touchedFields, setTouchedFields] = useState({});\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData(initialData);\n    }\n  }, [initialData]);\n\n  const validateField = (name, value) => {\n    const fieldErrors = {};\n\n    switch (name) {\n      case 'ingredientname':\n        if (!value?.trim()) {\n          fieldErrors[name] = 'Ingredient name is required';\n        } else if (value.length < 2) {\n          fieldErrors[name] = 'Name must be at least 2 characters';\n        } else if (value.length > 100) {\n          fieldErrors[name] = 'Name must be less than 100 characters';\n        }\n        break;\n\n      case 'unitofmeasure':\n        if (!value?.trim()) {\n          fieldErrors[name] = 'Unit of measure is required';\n        } else if (value.length > 10) {\n          fieldErrors[name] = 'Unit must be less than 10 characters';\n        }\n        break;\n\n      case 'currentstock':\n        if (value === '') {\n          fieldErrors[name] = 'Current stock is required';\n        } else if (isNaN(value) || Number(value) < 0) {\n          fieldErrors[name] = 'Stock must be a non-negative number';\n        } else if (Number(value) > 999999) {\n          fieldErrors[name] = 'Stock must be less than 1,000,000';\n        } else if (!Number.isInteger(Number(value))) {\n          fieldErrors[name] = 'Stock must be a whole number';\n        }\n        break;\n\n      case 'reorderthreshold':\n        if (value === '') {\n          fieldErrors[name] = 'Reorder threshold is required';\n        } else if (isNaN(value) || Number(value) < 0) {\n          fieldErrors[name] = 'Threshold must be a non-negative number';\n        } else if (Number(value) > 999999) {\n          fieldErrors[name] = 'Threshold must be less than 1,000,000';\n        } else if (!Number.isInteger(Number(value))) {\n          fieldErrors[name] = 'Threshold must be a whole number';\n        }\n        break;\n\n      case 'costperunit':\n        if (value === '') {\n          fieldErrors[name] = 'Cost per unit is required';\n        } else if (isNaN(value) || Number(value) <= 0) {\n          fieldErrors[name] = 'Cost must be greater than 0';\n        } else if (Number(value) > 999999.99) {\n          fieldErrors[name] = 'Cost must be less than 1,000,000';\n        } else if (!/^\\d+(\\.\\d{0,2})?$/.test(value)) {\n          fieldErrors[name] = 'Cost can only have up to 2 decimal places';\n        }\n        break;\n    }\n\n    setErrors(prev => ({\n      ...prev,\n      ...fieldErrors\n    }));\n\n    return Object.keys(fieldErrors).length === 0;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleBlur = (e) => {\n    const { name } = e.target;\n    setTouchedFields(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    validateField(name, formData[name]);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    const allTouched = Object.keys(formData).reduce((acc, key) => ({\n      ...acc,\n      [key]: true\n    }), {});\n    setTouchedFields(allTouched);\n    \n    let isValid = true;\n    Object.keys(formData).forEach(key => {\n      if (!validateField(key, formData[key])) {\n        isValid = false;\n      }\n    });\n    \n    if (!isValid) {\n      return;\n    }\n\n    const processedData = {\n      ...formData,\n      currentstock: Number(formData.currentstock),\n      reorderthreshold: Number(formData.reorderthreshold),\n      costperunit: Number(formData.costperunit)\n    };\n\n    onSubmit(processedData);\n  };\n\n  const renderField = (name, label, type = 'text') => (\n    <div>\n      <label htmlFor={name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n        {label} *\n        <span className=\"ml-1 text-gray-400 hover:text-gray-600 cursor-help\" title={tooltips[name]}>\n          \u24d8\n        </span>\n      </label>\n      <input\n        type={type}\n        id={name}\n        name={name}\n        value={formData[name]}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        className={`w-full px-3 py-2 border rounded-md ${\n          touchedFields[name] && errors[name] ? 'border-red-500' : 'border-gray-300'\n        } focus:outline-none focus:ring-1 focus:ring-rose-500`}\n      />\n      {touchedFields[name] && errors[name] && (\n        <p className=\"text-red-500 text-xs mt-1\">{errors[name]}</p>\n      )}\n    </div>\n  );\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {renderField('ingredientname', 'Ingredient Name')}\n      {renderField('unitofmeasure', 'Unit of Measure')}\n      {renderField('currentstock', 'Current Stock', 'number')}\n      {renderField('reorderthreshold', 'Reorder Threshold', 'number')}\n      {renderField('costperunit', 'Cost per Unit', 'number')}\n\n      <div>\n        <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Notes\n          <span className=\"ml-1 text-gray-400 hover:text-gray-600 cursor-help\" title={tooltips.notes}>\n            \u24d8\n          </span>\n        </label>\n        <textarea\n          id=\"notes\"\n          name=\"notes\"\n          value={formData.notes}\n          onChange={handleChange}\n          rows=\"3\"\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-rose-500\"\n        />\n      </div>\n\n      <div className=\"flex justify-end gap-3 mt-6\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded\"\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className={`px-4 py-2 text-white rounded flex items-center ${\n            isLoading ? 'bg-rose-400 cursor-not-allowed' : 'bg-rose-600 hover:bg-rose-700'\n          }`}\n        >\n          {isLoading ? (\n            <>\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Processing...\n            </>\n          ) : (\n            submitLabel\n          )}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default IngredientForm; ",
  "components/IngredientTable.jsx": "import { useState } from 'react';\nimport ThresholdBadge from './ThresholdBadge';\nimport { TrashIcon } from '@heroicons/react/24/outline';\n\nconst IngredientTable = ({ \n  ingredients, \n  onDelete, \n  onEdit,\n  isEditing,\n  editingId\n}) => {\n  const [editData, setEditData] = useState(null);\n  \n  const handleDoubleClick = (ingredient) => {\n    if (!isEditing) {\n      setEditData({...ingredient});\n      onEdit(ingredient.ingredientid);\n    }\n  };\n\n  const handleChange = (field, value) => {\n    setEditData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      onEdit(editingId, editData);\n    } else if (e.key === 'Escape') {\n      setEditData(null);\n      onEdit(null);\n    }\n  };\n\n  const formatCurrency = (value) => {\n    if (value === null || value === undefined || isNaN(value)) return '$0.00';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const renderCell = (ingredient, field, value) => {\n    if (editingId === ingredient.ingredientid) {\n      if (!editData) {\n        setEditData({...ingredient});\n        return value;\n      }\n\n      const type = field === 'costperunit' || field === 'currentstock' || field === 'reorderthreshold' ? 'number' : 'text';\n      const step = field === 'costperunit' ? '0.01' : '1';\n      \n      return (\n        <input\n          type={type}\n          value={editData[field] ?? ''}\n          onChange={(e) => handleChange(field, e.target.value)}\n          onKeyDown={handleKeyDown}\n          step={type === 'number' ? step : undefined}\n          className=\"w-full px-2 py-1 border rounded\"\n          autoFocus={field === 'ingredientname'}\n        />\n      );\n    }\n\n    // Special rendering for different field types\n    if (field === 'costperunit') {\n      return formatCurrency(value);\n    }\n\n    return value ?? '';\n  };\n\n  const renderActions = (ingredient) => {\n    if (editingId === ingredient.ingredientid) {\n      return (\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onEdit(ingredient.ingredientid, editData)}\n            className=\"text-green-600 hover:text-green-900\"\n          >\n            Save\n          </button>\n          <button\n            onClick={() => {\n              setEditData(null);\n              onEdit(null);\n            }}\n            className=\"text-gray-600 hover:text-gray-900\"\n          >\n            Cancel\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <button\n        onClick={() => onDelete(ingredient)}\n        className=\"p-2 text-gray-400 hover:text-red-500\"\n        title=\"Delete ingredient\"\n      >\n        <TrashIcon className=\"h-5 w-5\" />\n      </button>\n    );\n  };\n\n  return (\n    <table className=\"w-full border text-sm mb-4\">\n      <thead className=\"bg-slate-100\">\n        <tr>\n          <th className=\"text-left p-2 font-bold\">Name</th>\n          <th className=\"text-left p-2 font-bold\">Unit</th>\n          <th className=\"text-left p-2 font-bold\">Stock</th>\n          <th className=\"text-left p-2 font-bold\">Reorder At</th>\n          <th className=\"text-left p-2 font-bold\">Cost/Unit</th>\n          <th className=\"text-left p-2 font-bold\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ingredients.map((ingredient) => (\n          <tr \n            key={ingredient.ingredientid} \n            className={`border-t hover:bg-gray-50 ${editingId === ingredient.ingredientid ? 'bg-blue-50' : ''}`}\n            onDoubleClick={() => handleDoubleClick(ingredient)}\n          >\n            <td className=\"p-2\">{renderCell(ingredient, 'ingredientname', ingredient.ingredientname)}</td>\n            <td className=\"p-2\">{renderCell(ingredient, 'unitofmeasure', ingredient.unitofmeasure)}</td>\n            <td className=\"p-2\">\n              <div className=\"flex items-center gap-2\">\n                {renderCell(ingredient, 'currentstock', ingredient.currentstock)}\n                <ThresholdBadge\n                  currentStock={ingredient.currentstock}\n                  reorderThreshold={ingredient.reorderthreshold}\n                />\n              </div>\n            </td>\n            <td className=\"p-2\">{renderCell(ingredient, 'reorderthreshold', ingredient.reorderthreshold)}</td>\n            <td className=\"p-2\">{renderCell(ingredient, 'costperunit', ingredient.costperunit)}</td>\n            <td className=\"p-2\">\n              {renderActions(ingredient)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default IngredientTable; ",
  "components/LocationSelect.jsx": "import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchLocations } from '../lib/supabase/sales';\n\nexport default function LocationSelect({ value, onChange, className = '' }) {\n  const { data: locations, isLoading, error } = useQuery({\n    queryKey: ['locations'],\n    queryFn: fetchLocations\n  });\n\n  if (isLoading) return <select className={className} disabled><option>Loading...</option></select>;\n  if (error) return <select className={className} disabled><option>Error loading locations</option></select>;\n\n  return (\n    <select\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      className={`block w-full rounded-lg border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 ${className}`}\n    >\n      <option value=\"\">Select Location</option>\n      {locations.map((location) => (\n        <option key={location.locationid} value={location.locationid}>\n          {location.locationname}\n        </option>\n      ))}\n    </select>\n  );\n} ",
  "components/Modal.jsx": "const Modal = ({ \n  isOpen, \n  onClose, \n  onConfirm, \n  title, \n  message, \n  confirmText = 'Delete',\n  confirmStyle = 'bg-red-600 hover:bg-red-700',\n  children\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">{title}</h3>\n        \n        {children ? (\n          children\n        ) : (\n          <>\n            <p className=\"text-gray-600 mb-6\">{message}</p>\n            <div className=\"flex justify-end gap-3\">\n              <button\n                onClick={onClose}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={onConfirm}\n                className={`px-4 py-2 text-white rounded ${confirmStyle}`}\n              >\n                {confirmText}\n              </button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal; ",
  "components/ProductForm.jsx": "import { useState, useEffect } from 'react';\n\nconst initialFormData = {\n  productname: '',\n  category: '',\n  size: '',\n  price: '',\n  description: '',\n  stockquantity: '',\n  allergeninfo: '',\n  dietaryinfo: ''\n};\n\nconst tooltips = {\n  productname: 'Enter the full name of the product (2-100 characters)',\n  category: 'Product category (e.g., Pies, Preserves, Cookies)',\n  size: 'Product size or weight (e.g., 250g, 500ml)',\n  price: 'Product price in dollars (up to 2 decimal places)',\n  stockquantity: 'Available quantity in stock (whole numbers only)',\n  description: 'Brief description of the product',\n  allergeninfo: 'List any allergens (e.g., Contains: wheat, eggs, dairy)',\n  dietaryinfo: 'Dietary information (e.g., Vegetarian, Vegan, Gluten-Free)'\n};\n\nconst ProductForm = ({ initialData, onSubmit, onCancel, isLoading, submitLabel = 'Submit' }) => {\n  const [formData, setFormData] = useState(initialData || initialFormData);\n  const [errors, setErrors] = useState({});\n  const [touchedFields, setTouchedFields] = useState({});\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData(initialData);\n    }\n  }, [initialData]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleBlur = (e) => {\n    const { name } = e.target;\n    setTouchedFields(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    validateField(name, formData[name]);\n  };\n\n  const validateField = (name, value) => {\n    const newError = {};\n    \n    switch (name) {\n      case 'productname':\n        if (!value.trim()) {\n          newError[name] = 'Product name is required';\n        } else if (value.length < 2) {\n          newError[name] = 'Product name must be at least 2 characters';\n        } else if (value.length > 100) {\n          newError[name] = 'Product name must be less than 100 characters';\n        }\n        break;\n      \n      case 'category':\n        if (!value.trim()) {\n          newError[name] = 'Category is required';\n        } else if (value.length > 50) {\n          newError[name] = 'Category must be less than 50 characters';\n        }\n        break;\n      \n      case 'price':\n        if (!value) {\n          newError[name] = 'Price is required';\n        } else if (isNaN(value) || Number(value) <= 0) {\n          newError[name] = 'Price must be greater than 0';\n        } else if (Number(value) > 999999.99) {\n          newError[name] = 'Price must be less than 1,000,000';\n        } else if (!/^\\d+(\\.\\d{0,2})?$/.test(value)) {\n          newError[name] = 'Price can only have up to 2 decimal places';\n        }\n        break;\n      \n      case 'stockquantity':\n        if (!value) {\n          newError[name] = 'Stock quantity is required';\n        } else if (isNaN(value) || !Number.isInteger(Number(value))) {\n          newError[name] = 'Stock quantity must be a whole number';\n        } else if (Number(value) < 0) {\n          newError[name] = 'Stock quantity cannot be negative';\n        } else if (Number(value) > 999999) {\n          newError[name] = 'Stock quantity must be less than 1,000,000';\n        }\n        break;\n      \n      case 'size':\n        if (value && value.length > 20) {\n          newError[name] = 'Size must be less than 20 characters';\n        }\n        break;\n      \n      case 'description':\n        if (value && value.length > 255) {\n          newError[name] = 'Description must be less than 255 characters';\n        }\n        break;\n\n      case 'allergeninfo':\n        if (value && value.length > 255) {\n          newError[name] = 'Allergen info must be less than 255 characters';\n        }\n        break;\n\n      case 'dietaryinfo':\n        if (value && value.length > 255) {\n          newError[name] = 'Dietary info must be less than 255 characters';\n        }\n        break;\n    }\n\n    setErrors(prev => ({\n      ...prev,\n      ...newError\n    }));\n    return !newError[name];\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    let isValid = true;\n    \n    Object.keys(formData).forEach(key => {\n      if (!validateField(key, formData[key])) {\n        isValid = false;\n      }\n    });\n\n    setErrors(newErrors);\n    return isValid;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    const allTouched = Object.keys(formData).reduce((acc, key) => ({\n      ...acc,\n      [key]: true\n    }), {});\n    setTouchedFields(allTouched);\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    const productData = {\n      ...formData,\n      price: Number(formData.price),\n      stockquantity: Number(formData.stockquantity)\n    };\n\n    onSubmit(productData);\n  };\n\n  const renderField = (name, label, type = 'text', isTextArea = false) => {\n    const Component = isTextArea ? 'textarea' : 'input';\n    return (\n      <div>\n        <label htmlFor={name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n          {label}\n          {(name === 'productname' || name === 'category' || name === 'price' || name === 'stockquantity') && ' *'}\n          <span className=\"ml-1 text-gray-400 hover:text-gray-600 cursor-help\" title={tooltips[name]}>\n            \u24d8\n          </span>\n        </label>\n        <Component\n          type={type}\n          id={name}\n          name={name}\n          value={formData[name]}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          rows={isTextArea ? \"3\" : undefined}\n          className={`w-full px-3 py-2 border rounded-md ${\n            touchedFields[name] && errors[name] ? 'border-red-500' : 'border-gray-300'\n          } focus:outline-none focus:ring-1 focus:ring-rose-500`}\n        />\n        {touchedFields[name] && errors[name] && (\n          <p className=\"text-red-500 text-xs mt-1\">{errors[name]}</p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {renderField('productname', 'Product Name')}\n      {renderField('category', 'Category')}\n      {renderField('size', 'Size')}\n      {renderField('price', 'Price', 'number')}\n      {renderField('stockquantity', 'Stock Quantity', 'number')}\n      {renderField('description', 'Description', 'text', true)}\n      {renderField('allergeninfo', 'Allergen Information')}\n      {renderField('dietaryinfo', 'Dietary Information')}\n\n      <div className=\"flex justify-end gap-3 mt-6\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded\"\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className={`px-4 py-2 text-white rounded flex items-center ${\n            isLoading ? 'bg-rose-400 cursor-not-allowed' : 'bg-rose-600 hover:bg-rose-700'\n          }`}\n        >\n          {isLoading ? (\n            <>\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Processing...\n            </>\n          ) : (\n            submitLabel\n          )}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ProductForm; ",
  "components/ProductSelect.jsx": "import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchProducts } from '../lib/supabase/sales';\n\nexport default function ProductSelect({ value, onChange, className = '', excludeIds = [] }) {\n  const { data: products = [], isLoading, error } = useQuery({\n    queryKey: ['products'],\n    queryFn: fetchProducts,\n    retry: 2\n  });\n\n  if (isLoading) return <select className={className} disabled><option>Loading...</option></select>;\n  if (error) return <select className={className} disabled><option>Error loading products</option></select>;\n\n  const availableProducts = products.filter(product => !excludeIds.includes(product.productid));\n\n  const formatProductOption = (product) => {\n    const size = product.size ? ` (${product.size})` : '';\n    const stock = product.stockquantity ? ` - ${product.stockquantity} in stock` : '';\n    const price = product.price ? ` - $${Number(product.price).toFixed(2)}` : ' - Price N/A';\n    return `${product.productname}${size}${price}${stock}`;\n  };\n\n  return (\n    <select\n      value={value}\n      onChange={(e) => {\n        const product = products.find(p => p.productid === parseInt(e.target.value));\n        onChange(product || null);\n      }}\n      className={`block w-full rounded-lg border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 ${className}`}\n    >\n      <option value=\"\">Select Product</option>\n      {availableProducts.map((product) => (\n        <option key={product.productid} value={product.productid}>\n          {formatProductOption(product)}\n        </option>\n      ))}\n    </select>\n  );\n} ",
  "components/ProductTable.jsx": "import { useState } from 'react';\nimport { formatPrice } from '../utils/formatters';\nimport { TrashIcon } from '@heroicons/react/24/outline';\n\nconst ProductTable = ({ \n  products, \n  onDelete, \n  onEdit,\n  isEditing,\n  editingId\n}) => {\n  const [editData, setEditData] = useState(null);\n  \n  const handleDoubleClick = (product) => {\n    if (!isEditing) {\n      setEditData({...product});\n      onEdit(product.productid);\n    }\n  };\n\n  const handleChange = (field, value) => {\n    setEditData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Escape') {\n      setEditData(null);\n      onEdit(null);\n    }\n  };\n\n  const renderCell = (product, field, value) => {\n    if (editingId === product.productid) {\n      if (!editData) {\n        setEditData({...product});\n        return value;\n      }\n\n      const type = field === 'price' || field === 'stockquantity' ? 'number' : 'text';\n      const step = field === 'price' ? '0.01' : '1';\n      \n      return (\n        <input\n          type={type}\n          value={editData[field] ?? ''}\n          onChange={(e) => handleChange(field, e.target.value)}\n          onKeyDown={handleKeyDown}\n          step={type === 'number' ? step : undefined}\n          className=\"w-full px-2 py-1 border rounded\"\n          autoFocus={field === 'productname'}\n        />\n      );\n    }\n\n    // Special rendering for different field types\n    if (field === 'price') {\n      return formatPrice(value);\n    }\n    if (field === 'description' && !value) {\n      return 'No description';\n    }\n    if (field === 'size' && !value) {\n      return 'N/A';\n    }\n    if (field === 'stockquantity' && value === null) {\n      return '0';\n    }\n\n    return value;\n  };\n\n  return (\n    <table className=\"w-full border text-sm mb-4\">\n      <thead className=\"bg-slate-100\">\n        <tr>\n          <th className=\"text-left p-2\">Name</th>\n          <th className=\"text-left p-2\">Category</th>\n          <th className=\"text-left p-2\">Size</th>\n          <th className=\"text-left p-2\">Price</th>\n          <th className=\"text-left p-2\">Stock</th>\n          <th className=\"text-left p-2\">Description</th>\n          <th className=\"text-left p-2\">Dietary Info</th>\n          <th className=\"text-left p-2\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {products.map((product) => (\n          <tr \n            key={product.productid} \n            className={`border-t hover:bg-gray-50 ${editingId === product.productid ? 'bg-blue-50' : ''}`}\n            onDoubleClick={() => handleDoubleClick(product)}\n          >\n            <td className=\"p-2\">{renderCell(product, 'productname', product.productname)}</td>\n            <td className=\"p-2\">{renderCell(product, 'category', product.category)}</td>\n            <td className=\"p-2\">{renderCell(product, 'size', product.size)}</td>\n            <td className=\"p-2\">{renderCell(product, 'price', product.price)}</td>\n            <td className=\"p-2\">{renderCell(product, 'stockquantity', product.stockquantity)}</td>\n            <td className=\"p-2\">{renderCell(product, 'description', product.description)}</td>\n            <td className=\"p-2\">\n              {product.allergeninfo && (\n                <div className=\"text-red-600 text-xs mb-1\">\n                  Allergens: {renderCell(product, 'allergeninfo', product.allergeninfo)}\n                </div>\n              )}\n              {product.dietaryinfo && (\n                <div className=\"text-green-600 text-xs\">\n                  {renderCell(product, 'dietaryinfo', product.dietaryinfo)}\n                </div>\n              )}\n            </td>\n            <td className=\"p-2\">\n              {editingId === product.productid ? (\n                <div className=\"flex gap-2\">\n                  <button\n                    className=\"text-green-600 hover:underline text-sm\"\n                    onClick={() => onEdit(product.productid, editData)}\n                  >\n                    Save\n                  </button>\n                  <button\n                    className=\"text-gray-600 hover:underline text-sm\"\n                    onClick={() => {\n                      setEditData(null);\n                      onEdit(null);\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              ) : (\n                <button\n                  className=\"p-2 text-gray-400 hover:text-red-500\"\n                  onClick={() => onDelete(product)}\n                  title=\"Delete product\"\n                >\n                  <TrashIcon className=\"h-5 w-5\" />\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default ProductTable; ",
  "components/ProtectedRoute.jsx": "import React from 'react';\nimport { Navigate } from 'react-router-dom';\n\nexport default function ProtectedRoute({ children, role }) {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (!user) return <Navigate to=\"/\" />;\n\n  // Admins can access everything. Otherwise, if a specific role is required, ensure it matches.\n  if (role && user.role !== role && user.role !== 'admin') {\n    return <Navigate to=\"/unauthorized\" />;\n  }\n\n  return children;\n}\n",
  "components/SalesFormContainer.jsx": "import React, { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { createSale } from '../lib/supabase/sales';\nimport LocationSelect from './LocationSelect';\nimport SalesLineItem from './SalesLineItem';\nimport AlertModal from './AlertModal';\nimport CustomerSearch from './CustomerSearch';\nimport Select from 'react-select';\nimport { PlusIcon } from '@heroicons/react/24/outline';\n\nexport default function SalesFormContainer() {\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    saledate: new Date().toISOString().split('T')[0],\n    locationid: '',\n    paymentmethod: '',\n    customerid: null,\n    items: [{ productid: '', quantity: '', unitprice: 0 }]\n  });\n\n  const [alert, setAlert] = useState({\n    isOpen: false,\n    title: '',\n    message: ''\n  });\n\n  // Listen for product updates\n  useEffect(() => {\n    const handleProductUpdate = () => {\n      queryClient.invalidateQueries(['products']);\n    };\n\n    window.addEventListener('productsUpdated', handleProductUpdate);\n    return () => window.removeEventListener('productsUpdated', handleProductUpdate);\n  }, [queryClient]);\n\n  // \u2705 Trigger salesUpdated event after successful sale\n  const { mutate: submitSale, isLoading } = useMutation({\n    mutationFn: createSale,\n    onSuccess: () => {\n      // Reset form\n      setFormData({\n        saledate: new Date().toISOString().split('T')[0],\n        locationid: '',\n        paymentmethod: '',\n        customerid: null,\n        items: [{ productid: '', quantity: '', unitprice: 0 }]\n      });\n\n      setAlert({\n        isOpen: true,\n        title: 'Success',\n        message: 'Sale recorded successfully!'\n      });\n\n      // \ud83d\udece\ufe0f Emit salesUpdated event to notify SalesTracker\n      window.dispatchEvent(new Event('salesUpdated'));\n    },\n    onError: (error) => {\n      setAlert({\n        isOpen: true,\n        title: 'Error',\n        message: 'Error recording sale: ' + error.message\n      });\n    }\n  });\n\n  const validateForm = () => {\n    if (!formData.locationid) {\n      setAlert({\n        isOpen: true,\n        title: 'Validation Error',\n        message: 'Please select a location'\n      });\n      return false;\n    }\n\n    if (!formData.paymentmethod) {\n      setAlert({\n        isOpen: true,\n        title: 'Validation Error',\n        message: 'Please select a payment method'\n      });\n      return false;\n    }\n\n    if (!formData.items.length) {\n      setAlert({\n        isOpen: true,\n        title: 'Validation Error',\n        message: 'Please add at least one product'\n      });\n      return false;\n    }\n\n    const invalidItems = formData.items.filter(\n      item => !item.productid || !item.quantity || !item.unitprice\n    );\n\n    if (invalidItems.length) {\n      setAlert({\n        isOpen: true,\n        title: 'Validation Error',\n        message: 'Please complete all product entries'\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    // Calculate total\n    const saletotal = formData.items.reduce(\n      (sum, item) => sum + (Number(item.quantity) * Number(item.unitprice)),\n      0\n    );\n\n    // Submit sale with full timestamp\n    submitSale({\n      sale: {\n        saledate: new Date(`${formData.saledate}T${new Date().toTimeString().slice(0, 8)}`),\n        locationid: formData.locationid,\n        paymentmethod: formData.paymentmethod,\n        customerid: formData.customerid,\n        saletotal\n      },\n      items: formData.items.map(item => ({\n        ...item,\n        quantity: Number(item.quantity),\n        unitprice: Number(item.unitprice)\n      }))\n    });\n  };\n\n  const addItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, { productid: '', quantity: '', unitprice: 0 }]\n    }));\n  };\n\n  const updateItem = (index, updatedItem) => {\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.map((item, i) => i === index ? updatedItem : item)\n    }));\n  };\n\n  const removeItem = (index) => {\n    if (formData.items.length <= 1) {\n      setAlert({\n        isOpen: true,\n        title: 'Validation Error',\n        message: 'At least one product line is required'\n      });\n      return;\n    }\n\n    const itemToDelete = formData.items[index];\n    if (!itemToDelete.productid || !itemToDelete.quantity) {\n      // Allow delete silently for incomplete rows\n      setFormData(prev => ({\n        ...prev,\n        items: prev.items.filter((_, i) => i !== index)\n      }));\n      return;\n    }\n\n    // Remove the item and update formData\n    setFormData(prev => ({\n      ...prev,\n      items: prev.items.filter((_, i) => i !== index)\n    }));\n  };\n\n  // Move total calculation to a useMemo hook to optimize performance\n  const total = React.useMemo(() =>\n    formData.items.reduce(\n      (sum, item) => sum + ((Number(item.quantity) || 0) * (Number(item.unitprice) || 0)),\n      0\n    ),\n    [formData.items]\n  );\n\n  const usedProductIds = formData.items\n    .filter(item => item.productid)\n    .map(item => item.productid);\n\n  const paymentMethods = [\n    { value: 'Cash', label: 'Cash' },\n    { value: 'Debit', label: 'Debit' },\n    { value: 'Credit', label: 'Credit' },\n    { value: 'E-transfer', label: 'E-transfer' }\n  ];\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Sale Date\n            </label>\n            <input\n              type=\"date\"\n              value={formData.saledate}\n              onChange={(e) => setFormData(prev => ({ ...prev, saledate: e.target.value }))}\n              className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Location\n            </label>\n            <LocationSelect\n              value={formData.locationid}\n              onChange={(locationid) => setFormData(prev => ({ ...prev, locationid }))}\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Payment Method\n            </label>\n            <Select\n              value={paymentMethods.find(method => method.value === formData.paymentmethod)}\n              onChange={(option) => setFormData(prev => ({ ...prev, paymentmethod: option.value }))}\n              options={paymentMethods}\n              placeholder=\"Select how the customer paid...\"\n              className=\"mt-1\"\n              classNamePrefix=\"react-select\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Customer (Optional)\n            </label>\n            <CustomerSearch\n              value={formData.customerid ? { value: formData.customerid, label: '' } : null}\n              onChange={(option) => setFormData(prev => ({ ...prev, customerid: option?.value || null }))}\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">Products</h3>\n            <button\n              type=\"button\"\n              onClick={addItem}\n              className=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-rose-600 hover:bg-rose-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500\"\n            >\n              <PlusIcon className=\"h-4 w-4 mr-1\" />\n              Add Product\n            </button>\n          </div>\n\n          {formData.items.map((item, index) => (\n            <SalesLineItem\n              key={index}\n              item={item}\n              index={index}\n              onUpdate={updateItem}\n              onRemove={removeItem}\n              excludeProductIds={usedProductIds.filter(id => id !== item.productid)}\n            />\n          ))}\n        </div>\n\n        <div className=\"flex justify-between items-center pt-4 border-t\">\n          <div className=\"text-xl font-semibold\">\n            Total: ${total.toFixed(2)}\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-rose-600 hover:bg-rose-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isLoading ? 'Recording Sale...' : 'Record Sale'}\n          </button>\n        </div>\n      </form>\n\n      <AlertModal\n        isOpen={alert.isOpen}\n        onClose={() => setAlert(prev => ({ ...prev, isOpen: false }))}\n        title={alert.title}\n        message={alert.message}\n      />\n    </>\n  );\n}\n",
  "components/SalesLineItem.jsx": "import React from 'react';\nimport ProductSelect from './ProductSelect';\nimport { TrashIcon } from '@heroicons/react/24/outline';\n\nexport default function SalesLineItem({ \n  item, \n  onUpdate, \n  onRemove,\n  excludeProductIds,\n  index\n}) {\n  return (\n    <div className=\"flex items-center gap-4 mb-4\">\n      <div className=\"flex-1\">\n        <ProductSelect\n          value={item.productid || ''}\n          onChange={(product) => {\n            onUpdate(index, {\n              ...item,\n              productid: product.productid,\n              unitprice: product.price\n            });\n          }}\n          excludeIds={excludeProductIds}\n        />\n      </div>\n      \n      <div className=\"w-32\">\n        <input\n          type=\"number\"\n          min=\"1\"\n          value={item.quantity || ''}\n          onChange={(e) => {\n            const quantity = parseInt(e.target.value) || 0;\n            onUpdate(index, { ...item, quantity });\n          }}\n          className=\"block w-full rounded-lg border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500\"\n          placeholder=\"Quantity\"\n        />\n      </div>\n\n      <div className=\"w-32 text-right\">\n        ${((item.quantity || 0) * (item.unitprice || 0)).toFixed(2)}\n      </div>\n\n      <button\n        onClick={() => onRemove(index)}\n        className=\"p-2 text-gray-400 hover:text-red-500\"\n        title=\"Remove item\"\n      >\n        <TrashIcon className=\"h-5 w-5\" />\n      </button>\n    </div>\n  );\n} ",
  "components/ThresholdBadge.jsx": "const ThresholdBadge = ({ currentStock, reorderThreshold }) => {\n  if (currentStock === null || reorderThreshold === null) return null;\n\n  const stockLevel = currentStock / reorderThreshold;\n  \n  if (stockLevel <= 0.5) {\n    return (\n      <span className=\"px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full\">\n        Critical Stock\n      </span>\n    );\n  }\n  \n  if (stockLevel <= 1) {\n    return (\n      <span className=\"px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full\">\n        Low Stock\n      </span>\n    );\n  }\n\n  return null;\n};\n\nexport default ThresholdBadge; ",
  "lib/supabase/ingredients.js": "import { supabase } from './supabaseClient';\n\nexport const fetchIngredients = async ({ page = 0, itemsPerPage = 5 } = {}) => {\n  try {\n    // Get total count\n    const { count, error: countError } = await supabase\n      .from('ingredients')\n      .select('*', { count: 'exact', head: true });\n\n    if (countError) {\n      throw countError;\n    }\n\n    // Get paginated data\n    const { data, error } = await supabase\n      .from('ingredients')\n      .select('*')\n      .range(page * itemsPerPage, (page + 1) * itemsPerPage - 1)\n      .order('ingredientid', { ascending: true });\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data,\n      count,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in fetchIngredients:', error.message);\n    return {\n      data: null,\n      count: 0,\n      error\n    };\n  }\n};\n\nexport const addIngredient = async (ingredientData) => {\n  try {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .insert([ingredientData])\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in addIngredient:', error.message);\n    return {\n      data: null,\n      error\n    };\n  }\n};\n\nexport const updateIngredient = async (id, ingredientData) => {\n  try {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .update(ingredientData)\n      .eq('ingredientid', id)\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in updateIngredient:', error.message);\n    return {\n      data: null,\n      error\n    };\n  }\n};\n\nexport const deleteIngredient = async (id) => {\n  try {\n    const { error } = await supabase\n      .from('ingredients')\n      .delete()\n      .eq('ingredientid', id);\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in deleteIngredient:', error.message);\n    return {\n      error\n    };\n  }\n}; ",
  "lib/supabase/sales.js": "import { supabase } from './supabaseClient';\n\nexport async function fetchProducts() {\n  const { data, error } = await supabase\n    .from('products')\n    .select('productid, productname, price, stockquantity, size')\n    .order('productname');\n  \n  if (error) throw error;\n  return data;\n}\n\nexport async function fetchLocations() {\n  const { data, error } = await supabase\n    .from('locations')\n    .select('*')\n    .order('locationname');\n  \n  if (error) throw error;\n  return data;\n}\n\nexport async function createSale({ sale, items }) {\n  try {\n    // Start a Supabase transaction\n    const { data: saleData, error: saleError } = await supabase\n      .from('sales')\n      .insert([{\n        saledate: sale.saledate,\n        locationid: sale.locationid,\n        paymentmethod: sale.paymentmethod,\n        customerid: sale.customerid || null,\n        saletotal: sale.saletotal\n      }])\n      .select()\n      .single();\n\n    if (saleError) throw saleError;\n\n    // Prepare sale items with the new sale ID\n    const saleItems = items.map(item => ({\n      saleid: saleData.saleid,\n      productid: item.productid,\n      quantitysold: item.quantity,\n      unitprice: item.unitprice\n    }));\n\n    // Insert all sale items\n    const { error: itemsError } = await supabase\n      .from('sale_items')\n      .insert(saleItems);\n\n    if (itemsError) throw itemsError;\n\n    // Update product inventory\n    for (const item of items) {\n      const { error: updateError } = await supabase.rpc('update_product_inventory', {\n        p_productid: item.productid,\n        p_quantity: -item.quantity // Negative because we're reducing inventory\n      });\n\n      if (updateError) throw updateError;\n    }\n\n    // Trigger a refresh of the products list\n    window.dispatchEvent(new Event('productsUpdated'));\n\n    return saleData;\n  } catch (error) {\n    console.error('Error in createSale:', error);\n    throw error;\n  }\n} ",
  "lib/supabase/supabaseClient.js": "import { createClient } from '@supabase/supabase-js'\n\n// Create a single supabase instance\nlet supabaseInstance = null;\n\nfunction getSupabaseClient() {\n  if (!supabaseInstance) {\n    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n    const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\n    supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        persistSession: true,\n        storageKey: 'aunt-rosie-storage-key'\n      }\n    });\n  }\n  return supabaseInstance;\n}\n\nexport const supabase = getSupabaseClient(); ",
  "pages/About.jsx": "import React from 'react';\nimport { StarIcon, ArrowUpIcon } from '@heroicons/react/24/solid';\n\nexport default function About() {\n  return (\n    <div className=\"relative bg-gradient-to-b from-white to-gray-100 py-12\">\n      <div className=\"max-w-5xl mx-auto p-6 space-y-6 bg-white bg-opacity-80 rounded-lg shadow-lg\">\n        <div className=\"flex justify-center space-x-2\">\n          <StarIcon className=\"h-6 w-6 text-rose-500 animate-bounce\" />\n          <StarIcon className=\"h-6 w-6 text-rose-500 animate-bounce delay-150\" />\n          <StarIcon className=\"h-6 w-6 text-rose-500 animate-bounce delay-300\" />\n        </div>\n        \n        <header className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-rose-700\">\n            Aunt Rosie's Management System\n          </h1>\n          <h2 className=\"text-2xl font-semibold text-gray-800\">\n            Internal Dashboard & Company Values\n          </h2>\n        </header>\n        \n        <hr className=\"border-gray-300\" />\n\n        <section className=\"space-y-4 text-lg text-gray-800\">\n          <p>\n            Since the early 80\u2019s, Aunt Rosie\u2019s Homemade Pies and Preserves has been built on a foundation of passion, hard work, and unwavering commitment to quality. \n            From our humble beginnings at local farmers markets to our modern, commercial-grade kitchen, every step of our journey has been about perfecting our craft.\n          </p>\n          <p>\n            This management system was developed specifically for our team\u2014to streamline operations, track sales, manage ingredients, and monitor product inventory. \n            It\u2019s designed to support you in upholding the high standards that have made Aunt Rosie\u2019s a trusted name in the community.\n          </p>\n          <p>\n            As you navigate through the dashboard, remember that our core values remain the same: attention to detail, a passion for excellence, and a commitment to delivering the best. \n            Whether you\u2019re entering sales data, updating ingredient stocks, or managing product details, your efforts ensure that every customer receives a taste of our legacy.\n          </p>\n        </section>\n\n        <footer className=\"mt-8 text-center\">\n          <blockquote className=\"italic text-gray-600\">\n            \"Excellence in every detail, passion in every product.\"\n          </blockquote>\n          <div className=\"mt-4 flex justify-center\">\n            <ArrowUpIcon className=\"h-6 w-6 text-gray-500 animate-bounce\" />\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n}\n",
  "pages/Dashboard.jsx": "import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function Dashboard() {\n  const navigate = useNavigate();\n\n  const [totals, setTotals] = useState({\n    daily: 0,\n    weekly: 0,\n    monthly: 0,\n    quarterly: 0,\n  });\n  const [topProduct, setTopProduct] = useState(null);\n\n  useEffect(() => {\n    const sales = JSON.parse(localStorage.getItem('sales')) || [];\n    const today = new Date().toISOString().split('T')[0];\n    const now = new Date();\n\n    const last7 = new Date(now - 7 * 86400000);\n    const last30 = new Date(now - 30 * 86400000);\n    const last90 = new Date(now - 90 * 86400000);\n\n    const dailySales = sales.filter((s) => s.saledate === today);\n    const weeklySales = sales.filter((s) => new Date(s.saledate) >= last7);\n    const monthlySales = sales.filter((s) => new Date(s.saledate) >= last30);\n    const quarterlySales = sales.filter((s) => new Date(s.saledate) >= last90);\n\n    setTotals({\n      daily: dailySales.reduce((sum, s) => sum + s.saletotal, 0),\n      weekly: weeklySales.reduce((sum, s) => sum + s.saletotal, 0),\n      monthly: monthlySales.reduce((sum, s) => sum + s.saletotal, 0),\n      quarterly: quarterlySales.reduce((sum, s) => sum + s.saletotal, 0),\n    });\n\n    // \ud83d\udd25 Top Product Calculation\n    const productCounts = {};\n    sales.forEach((sale) => {\n      sale.items?.forEach((item) => {\n        const name = item.productid || 'Unknown';\n        productCounts[name] = (productCounts[name] || 0) + Number(item.quantity || 0);\n      });\n    });\n\n    const top = Object.entries(productCounts).reduce(\n      (max, curr) => (curr[1] > max[1] ? curr : max),\n      ['None', 0]\n    );\n    setTopProduct(top);\n  }, []);\n\n  const handleCardClick = (period) => {\n    navigate(`/sales-tracker?period=${period}`);\n  };\n\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 mt-10\">\n      <h1 className=\"text-3xl font-bold text-rose-700 mb-4\">\n        Welcome, {user?.username || 'Guest'}!\n      </h1>\n      <p className=\"text-gray-600 mb-6\">Here\u2019s an overview of your pie empire \ud83c\udf53\ud83e\udd67</p>\n\n      <div className=\"bg-white p-6 rounded shadow mb-6\">\n        <h2 className=\"text-xl font-semibold text-rose-600 mb-2\">Today's Sales</h2>\n        <p className=\"text-gray-700\">{`$${totals.daily.toFixed(2)}`}</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        <Card\n          title=\"\ud83d\udcc5 Daily Sales\"\n          value={totals.daily}\n          description=\"View daily sales trends\"\n          color=\"rose\"\n          onClick={() => handleCardClick('daily')}\n        />\n        <Card\n          title=\"\ud83d\udcc8 Weekly Sales\"\n          value={totals.weekly}\n          description=\"Explore weekly performance\"\n          color=\"blue\"\n          onClick={() => handleCardClick('weekly')}\n        />\n        <Card\n          title=\"\ud83d\udcca 30-Day Sales\"\n          value={totals.monthly}\n          description=\"Check monthly trends\"\n          color=\"green\"\n          onClick={() => handleCardClick('monthly')}\n        />\n        <Card\n          title=\"\ud83d\udcc6 Quarterly Sales\"\n          value={totals.quarterly}\n          description=\"Analyze quarterly growth\"\n          color=\"yellow\"\n          onClick={() => handleCardClick('quarterly')}\n        />\n        <Card\n          title=\"\ud83d\udccd Location-Based Sales\"\n          value={''}\n          description=\"See which markets perform best\"\n          color=\"indigo\"\n          onClick={() => navigate('/sales-tracker')}\n        />\n      </div>\n\n      {topProduct && (\n        <div className=\"mt-8 text-center text-green-700 font-medium\">\n          \ud83e\udd67 Best Seller: <strong>{topProduct[0]}</strong> with{' '}\n          <strong>{topProduct[1]}</strong> units sold\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction Card({ title, value, description, onClick, color }) {\n  const bgColors = {\n    rose: 'bg-rose-100 hover:bg-rose-200 text-rose-600',\n    blue: 'bg-blue-100 hover:bg-blue-200 text-blue-600',\n    green: 'bg-green-100 hover:bg-green-200 text-green-600',\n    yellow: 'bg-yellow-100 hover:bg-yellow-200 text-yellow-600',\n    indigo: 'bg-indigo-100 hover:bg-indigo-200 text-indigo-600',\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      className={`cursor-pointer p-4 rounded-lg shadow transition ${\n        bgColors[color] || 'bg-gray-100 text-gray-600'\n      }`}\n    >\n      <h2 className=\"text-lg font-semibold\">{title}</h2>\n      {value !== '' && <p className=\"text-xl font-bold\">{`$${value.toFixed(2)}`}</p>}\n      <p className=\"text-sm text-gray-600 mt-2\">{description}</p>\n    </div>\n  );\n}\n",
  "pages/Ingredients.jsx": "import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport IngredientTable from '../components/IngredientTable';\nimport AddIngredientModal from '../components/AddIngredientModal';\nimport Modal from '../components/Modal';\nimport {\n  fetchIngredients,\n  addIngredient,\n  updateIngredient,\n  deleteIngredient\n} from '../lib/supabase/ingredients';\n\nconst ITEMS_PER_PAGE = 5;\n\nconst Ingredients = () => {\n  const [ingredients, setIngredients] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState(0);\n  const [page, setPage] = useState(0);\n  const [deleteModal, setDeleteModal] = useState({ isOpen: false, ingredient: null });\n  const [editModal, setEditModal] = useState({ isOpen: false, ingredientId: null, data: null });\n  const [addModal, setAddModal] = useState(false);\n  const [isAddingIngredient, setIsAddingIngredient] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Calculate total pages\n  const totalPages = Math.ceil(totalCount / ITEMS_PER_PAGE);\n\n  // Reset editing state when page changes\n  useEffect(() => {\n    setEditingId(null);\n    setIsEditing(false);\n    setEditModal({ isOpen: false, ingredientId: null, data: null });\n  }, [page]);\n\n  const loadIngredients = async () => {\n    try {\n      setIsLoading(true);\n      const { data, count } = await fetchIngredients({ page, itemsPerPage: ITEMS_PER_PAGE });\n      setIngredients(data);\n      setTotalCount(count);\n    } catch (error) {\n      console.error('Error loading ingredients:', error);\n      toast.error('Failed to load ingredients');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadIngredients();\n  }, [page]);\n\n  const handleAdd = async (data) => {\n    setIsAddingIngredient(true);\n    try {\n      await addIngredient(data);\n      toast.success('Ingredient added successfully');\n      setAddModal(false);\n      if (page === 0) {\n        loadIngredients();\n      } else {\n        setPage(0);\n      }\n    } catch (error) {\n      console.error('Error adding ingredient:', error);\n      toast.error('Failed to add ingredient');\n    } finally {\n      setIsAddingIngredient(false);\n    }\n  };\n\n  const handleEdit = async (ingredientId, editedData) => {\n    if (!ingredientId) {\n      setEditingId(null);\n      setIsEditing(false);\n      return;\n    }\n\n    if (!editedData) {\n      setEditingId(ingredientId);\n      setIsEditing(true);\n      return;\n    }\n\n    // Show confirmation modal\n    setEditModal({ isOpen: true, ingredientId, data: editedData });\n  };\n\n  const handleEditConfirm = async () => {\n    const { ingredientId, data: editedData } = editModal;\n    setIsEditing(true);\n\n    try {\n      // Convert string values to numbers where needed\n      const processedData = {\n        ...editedData,\n        costperunit: parseFloat(editedData.costperunit),\n        currentstock: parseInt(editedData.currentstock),\n        reorderthreshold: parseInt(editedData.reorderthreshold)\n      };\n\n      await updateIngredient(ingredientId, processedData);\n      \n      // Update local state\n      setIngredients(prev =>\n        prev.map(i =>\n          i.ingredientid === ingredientId ? { ...i, ...processedData } : i\n        )\n      );\n\n      toast.success('Ingredient updated successfully');\n      setEditingId(null);\n      setEditModal({ isOpen: false, ingredientId: null, data: null });\n    } catch (error) {\n      console.error('Error updating ingredient:', error);\n      toast.error('Failed to update ingredient');\n    } finally {\n      setIsEditing(false);\n    }\n  };\n\n  const handleDelete = (ingredient) => {\n    setDeleteModal({ isOpen: true, ingredient });\n  };\n\n  const handleDeleteConfirm = async () => {\n    try {\n      await deleteIngredient(deleteModal.ingredient.ingredientid);\n      toast.success('Ingredient deleted successfully');\n      setDeleteModal({ isOpen: false, ingredient: null });\n      \n      if (ingredients.length === 1 && page > 0) {\n        setPage(prev => prev - 1);\n      } else {\n        loadIngredients();\n      }\n    } catch (error) {\n      console.error('Error deleting ingredient:', error);\n      toast.error('Failed to delete ingredient');\n    }\n  };\n\n  // Generate page numbers\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    for (let i = 0; i < totalPages; i++) {\n      pageNumbers.push(i);\n    }\n    return pageNumbers;\n  };\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <Modal\n        isOpen={deleteModal.isOpen}\n        onClose={() => setDeleteModal({ isOpen: false, ingredient: null })}\n        onConfirm={handleDeleteConfirm}\n        title=\"Confirm Deletion\"\n        message={`Are you sure you want to delete \"${deleteModal.ingredient?.ingredientname}\"? This action cannot be undone.`}\n        confirmText=\"Delete\"\n        confirmStyle=\"bg-red-600 hover:bg-red-700\"\n      />\n\n      <Modal\n        isOpen={editModal.isOpen}\n        onClose={() => {\n          setEditModal({ isOpen: false, ingredientId: null, data: null });\n          setEditingId(null);\n        }}\n        onConfirm={handleEditConfirm}\n        title=\"Confirm Edit\"\n        message=\"Are you sure you want to save these changes?\"\n        confirmText=\"Save Changes\"\n        confirmStyle=\"bg-green-600 hover:bg-green-700\"\n      />\n      \n      <AddIngredientModal\n        isOpen={addModal}\n        onClose={() => setAddModal(false)}\n        onSubmit={handleAdd}\n        isLoading={isAddingIngredient}\n      />\n      \n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-3xl font-bold text-rose-700\">Ingredient List</h2>\n        <button\n          onClick={() => setAddModal(true)}\n          className=\"px-4 py-2 bg-rose-600 text-white rounded hover:bg-rose-700 transition-colors\"\n        >\n          Add Ingredient\n        </button>\n      </div>\n  \n      {isLoading ? (\n        <p className=\"text-gray-500\">Loading ingredients...</p>\n      ) : ingredients.length === 0 ? (\n        <p className=\"text-gray-500\">No ingredients found.</p>\n      ) : (\n        <>\n          <IngredientTable\n            ingredients={ingredients}\n            onDelete={handleDelete}\n            onEdit={handleEdit}\n            isEditing={isEditing}\n            editingId={editingId}\n          />\n          \n          {/* Pagination Controls */}\n          <div className=\"flex flex-col items-center gap-4 mt-4\">\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => setPage(p => Math.max(0, p - 1))}\n                disabled={page === 0}\n                className={`px-3 py-1 rounded ${\n                  page === 0\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Previous\n              </button>\n              \n              {getPageNumbers().map((pageNum) => (\n                <button\n                  key={pageNum}\n                  onClick={() => setPage(pageNum)}\n                  className={`px-3 py-1 rounded ${\n                    page === pageNum\n                      ? 'bg-rose-600 text-white'\n                      : 'bg-gray-100 hover:bg-gray-200'\n                  }`}\n                >\n                  {pageNum + 1}\n                </button>\n              ))}\n\n              <button\n                onClick={() => setPage(p => p + 1)}\n                disabled={page >= totalPages - 1}\n                className={`px-3 py-1 rounded ${\n                  page >= totalPages - 1\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Next\n              </button>\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              Showing {page * ITEMS_PER_PAGE + 1} to {Math.min((page + 1) * ITEMS_PER_PAGE, totalCount)} of {totalCount} items\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Ingredients; ",
  "pages/LabelGeneration.jsx": "import React, { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase/supabaseClient';\nimport toast from 'react-hot-toast';\n\nconst LabelGenerator = () => {\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedProductId, setSelectedProductId] = useState(null);\n  const [labelData, setLabelData] = useState(null);\n\n  // Fetch products from Supabase\n  const fetchProducts = async () => {\n    setIsLoading(true);\n    const { data, error } = await supabase\n      .from('products')\n      .select('*')\n      .order('productid', { ascending: true });\n    if (error) {\n      toast.error('Error fetching products');\n    } else {\n      setProducts(data);\n      if (data && data.length > 0) {\n        setSelectedProductId(data[0].productid);\n      }\n    }\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n\n  const handleGenerateLabel = async () => {\n    if (!selectedProductId) return;\n    const { data, error } = await supabase\n      .from('products')\n      .select('*')\n      .eq('productid', selectedProductId)\n      .single();\n    if (error) {\n      toast.error('Error generating label');\n    } else {\n      setLabelData(data);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-rose-700 mb-6\">Product Label Generator</h2>\n      \n      <div className=\"mb-4\">\n        {isLoading ? (\n          <p className=\"text-gray-500\">Loading products...</p>\n        ) : (\n          <select\n            className=\"border rounded p-2\"\n            value={selectedProductId || ''}\n            onChange={(e) => setSelectedProductId(e.target.value)}\n          >\n            {products.map(product => (\n              <option key={product.productid} value={product.productid}>\n                {product.productname}\n              </option>\n            ))}\n          </select>\n        )}\n      </div>\n\n      <button\n        onClick={handleGenerateLabel}\n        className=\"bg-rose-600 hover:bg-rose-700 text-white font-semibold py-2 px-4 rounded\"\n      >\n        Generate Label\n      </button>\n\n      {labelData && (\n        <div className=\"mt-8 p-6 bg-white shadow-xl rounded-lg border border-gray-300 max-w-sm mx-auto\">\n\n          {/* Header */}\n          <div className=\"flex justify-between items-center border-b pb-2 mb-4\">\n            <h3 className=\"text-2xl font-bold text-rose-600\">{labelData.productname}</h3>\n            <span className=\"text-sm text-gray-500\">ID: {labelData.productid}</span>\n          </div>\n          {/* Product Details */}\n          <p className=\"text-lg mb-2\">{labelData.description}</p>\n          <p className=\"mb-2\">\n            <strong>Category:</strong> {labelData.category} &bull; <strong>Size:</strong> {labelData.size}\n          </p>\n          <p className=\"mb-2\">\n            <strong>Price:</strong> ${labelData.price}\n          </p>\n          <p className=\"mb-2\">\n            <strong>Allergens:</strong> {labelData.allergeninfo || 'None'}\n          </p>\n          {labelData.dietaryinfo && (\n            <p className=\"mb-2\">\n              <strong>Dietary Info:</strong> {labelData.dietaryinfo}\n            </p>\n          )}\n          {/* Disclaimer & Contains Section */}\n          <div className=\"mt-4 p-4 border-t border-gray-300\">\n            <p className=\"text-xs text-gray-600 italic\">\n              Disclaimer: This product is manufactured in compliance with all applicable food and health safety regulations. Please consult your healthcare provider if you have any concerns regarding allergens or dietary restrictions.\n            </p>\n            <p className=\"mt-2 text-sm\">\n              This product contains: Water, Salt, Sugar, Natural Flavors, Spices, Preservatives, Antioxidants, Emulsifiers, Stabilizers, and a blend of common food additives.\n            </p>\n          </div>\n          {/* Footer */}\n          <div className=\"mt-4 text-center text-xs text-gray-400\">\n            &copy; {new Date().getFullYear()} Aunt Rosie's Kitchen\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LabelGenerator;\n",
  "pages/LocationSales.jsx": "import React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nexport default function LocationSales() {\n  const [sales, setSales] = useState([]);\n  const [locationTotals, setLocationTotals] = useState({});\n  const [topLocation, setTopLocation] = useState(null);\n  const [chartData, setChartData] = useState(null); // null by default\n\n  useEffect(() => {\n    const { data, error } = fetchSalesData();\n    if (!error && data.length) {\n      setSales(data);\n      const grouped = groupSalesByLocation(data);\n      setLocationTotals(grouped);\n      setTopLocation(getTopLocation(grouped));\n      setChartData(buildChartData(grouped));\n    }\n  }, []);\n\n  const fetchSalesData = () => {\n    return {\n      data: JSON.parse(localStorage.getItem('sales')) || [],\n      error: null,\n    };\n  };\n\n  const groupSalesByLocation = (data) => {\n    return data.reduce((acc, sale) => {\n      const location = sale.locationid || 'Unknown';\n      if (!acc[location]) acc[location] = 0;\n      acc[location] += sale.saletotal;\n      return acc;\n    }, {});\n  };\n\n  const getTopLocation = (totals) => {\n    const entries = Object.entries(totals);\n    if (!entries.length) return null;\n    return entries.reduce((max, curr) => (curr[1] > max[1] ? curr : max));\n  };\n\n  const buildChartData = (totals) => {\n    return {\n      labels: Object.keys(totals),\n      datasets: [\n        {\n          label: 'Sales by Location',\n          data: Object.values(totals),\n          backgroundColor: '#60a5fa',\n        },\n      ],\n    };\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 bg-white shadow rounded-lg\">\n      <h1 className=\"text-3xl font-bold text-rose-700 mb-6\">\ud83d\udccd Location-Based Sales</h1>\n\n      {topLocation && (\n        <div className=\"mb-6 p-4 bg-green-100 text-green-800 rounded-md\">\n          \ud83c\udfc6 <strong>Top Performing Location:</strong> {topLocation[0]} (${topLocation[1].toFixed(2)})\n        </div>\n      )}\n\n      <div className=\"bg-white p-4 rounded-lg shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">\ud83d\udcca Sales by Location</h2>\n        {chartData?.datasets?.length ? (\n          <Bar data={chartData} />\n        ) : (\n          <p className=\"text-center text-gray-500\">\n            No sales data to display yet. \ud83d\udcc9 Try recording a sale!\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n",
  "pages/Login.jsx": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../lib/supabase/supabaseClient'; \n\nexport default function Login() {\n  const navigate = useNavigate();\n  const [username, setUsername] = useState(''); \n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false); \n\n  useEffect(() => {\n    const user = localStorage.getItem('user');\n    if (user) navigate('/dashboard');\n  }, [navigate]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!username || !password) {\n      setError('Please enter both username and password.');\n      return;\n    }\n    setError('');\n\n    // Call the RPC function to check login credentials\n    const { data, error: loginError } = await supabase.rpc('login_employee', {\n      in_username: username,\n      in_password: password,\n    });\n\n    if (loginError) {\n      setError(loginError.message);\n      return;\n    }\n    if (!data || data.length === 0) {\n      setError('Invalid username or password.');\n      return;\n    }\n    \n    // Successful login: determine role based on roleid from the database\n    const loggedInUser = data[0];\n    let mappedRole;\n    switch (loggedInUser.roleid) {\n      case 1:\n        mappedRole = 'admin';\n        break;\n      case 2:\n        mappedRole = 'sales';\n        break;\n      case 3:\n        mappedRole = 'kitchen';\n        break;\n      default:\n        mappedRole = 'unknown';\n    }\n\n    // Store the user details with the role from the DB\n    localStorage.setItem('user', JSON.stringify({ username: loggedInUser.username, role: mappedRole }));\n    navigate('/dashboard');\n  };\n\n  return (\n    <div\n      className=\"relative min-h-screen flex flex-col justify-center items-center bg-cover bg-center px-4\"\n      style={{ backgroundImage: `url('/piepic.jpg')` }}\n    >\n      <div className=\"bg-white bg-opacity-90 p-8 rounded-lg shadow-lg max-w-sm w-full relative z-10 text-center\">\n        <div className=\"text-6xl animate-bounce mb-2\">\ud83e\udd67</div>\n        <h1 className=\"text-4xl font-bold text-rose-700 mt-2\">Aunt Rosie\u2019s</h1>\n        <p className=\"text-gray-600 mb-6\">{isRegistering ? 'Register an Account' : 'Welcome Back!'}</p>\n        {error && <p className=\"text-red-500 text-sm mb-3\">{error}</p>}\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            className=\"w-full px-4 py-2 border rounded focus:outline-none focus:ring focus:border-rose-400\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            className=\"w-full px-4 py-2 border rounded focus:outline-none focus:ring focus:border-rose-400\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <button\n            type=\"submit\"\n            className=\"w-full bg-rose-600 hover:bg-rose-700 text-white font-semibold py-2 rounded transition-transform duration-300 hover:scale-105 active:scale-95\"\n          >\n            {isRegistering ? 'Register' : 'Login'}\n          </button>\n        </form>\n        <p className=\"mt-4 text-sm text-gray-600\">\n          {isRegistering ? 'Already have an account?' : 'Don\u2019t have an account?'}{' '}\n          <button\n            type=\"button\"\n            onClick={() => setIsRegistering(!isRegistering)}\n            className=\"text-rose-600 hover:underline font-medium\"\n          >\n            {isRegistering ? 'Login' : 'Register'}\n          </button>\n        </p>\n      </div>\n    </div>\n  );\n}\n",
  "pages/Products.jsx": "import { useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase/supabaseClient';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Modal from '../components/Modal';\nimport AddProductModal from '../components/AddProductModal';\nimport ProductTable from '../components/ProductTable';\nimport { validateProductData } from '../utils/formatters';\n\nconst Products = () => {\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n  const [deleteModal, setDeleteModal] = useState({ isOpen: false, product: null });\n  const [editModal, setEditModal] = useState({ isOpen: false, productId: null, data: null });\n  const [addModal, setAddModal] = useState(false);\n  const [isAddingProduct, setIsAddingProduct] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const itemsPerPage = 5;\n\n  // Calculate total pages\n  const totalPages = Math.ceil(totalCount / itemsPerPage);\n\n  // Reset editing state when page changes\n  useEffect(() => {\n    setEditingId(null);\n    setIsEditing(false);\n    setEditModal({ isOpen: false, productId: null, data: null });\n  }, [page]);\n\n  // Fetch products on page load\n  useEffect(() => {\n    let mounted = true;\n\n    async function fetchProducts() {\n      try {\n        setIsLoading(true);\n        \n        // Fetch total count\n        const { count, error: countError } = await supabase\n          .from('products')\n          .select('*', { count: 'exact', head: true });\n\n        if (countError) {\n          console.error('Error fetching count:', countError.message);\n          toast.error('Failed to load total count');\n          return;\n        }\n\n        setTotalCount(count || 0);\n\n        // Fetch paginated data\n        const { data, error } = await supabase\n          .from('products')\n          .select('*')\n          .range(page * itemsPerPage, (page + 1) * itemsPerPage - 1)\n          .order('productid', { ascending: true });\n        \n        if (error) {\n          console.error('Error fetching products:', error.message);\n          toast.error('Failed to load products');\n          return;\n        }\n\n        if (mounted) {\n          setProducts(data || []);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Unexpected error:', err);\n        toast.error('An unexpected error occurred');\n      } finally {\n        if (mounted) {\n          setIsLoading(false);\n        }\n      }\n    }\n\n    fetchProducts();\n\n    return () => {\n      mounted = false;\n    };\n  }, [page]);\n\n  // Add product handler\n  async function handleAddProduct(productData) {\n    setIsAddingProduct(true);\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .insert([productData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error adding product:', error.message);\n        toast.error('Failed to add product');\n        return;\n      }\n\n      toast.success('Product added successfully');\n      \n      // Update total count\n      setTotalCount(prev => prev + 1);\n      \n      // If we're on the first page, update the products list\n      if (page === 0) {\n        setProducts(prev => {\n          const newProducts = [data, ...prev];\n          if (newProducts.length > itemsPerPage) {\n            newProducts.pop(); // Remove last item if we've exceeded items per page\n          }\n          return newProducts;\n        });\n      }\n\n      // Close modal and reset form\n      setAddModal(false);\n    } catch (err) {\n      console.error('Unexpected error during add:', err);\n      toast.error('An unexpected error occurred');\n    } finally {\n      setIsAddingProduct(false);\n    }\n  }\n\n  // Delete handler\n  async function handleDelete(product) {\n    setDeleteModal({ isOpen: true, product });\n  }\n\n  async function deleteProduct(id) {\n    try {\n      const { error } = await supabase.from('products').delete().eq('productid', id);\n      if (error) {\n        console.error('Delete error:', error.message);\n        toast.error('Failed to delete product');\n        return;\n      }\n      setProducts(products.filter(p => p.productid !== id));\n      toast.success('Product deleted successfully');\n      setDeleteModal({ isOpen: false, product: null });\n      \n      // Update total count\n      setTotalCount(prev => prev - 1);\n      \n      // If we're on the last page and it's now empty, go to previous page\n      if (products.length === 1 && page > 0) {\n        setPage(prev => prev - 1);\n      }\n    } catch (err) {\n      console.error('Unexpected error during delete:', err);\n      toast.error('An unexpected error occurred');\n    }\n  }\n\n  // Edit handler\n  const handleEdit = async (productId, editedData) => {\n    if (!productId) {\n      setEditingId(null);\n      setIsEditing(false);\n      return;\n    }\n\n    if (!editedData) {\n      setEditingId(productId);\n      setIsEditing(true);\n      return;\n    }\n\n    // Validate the edited data\n    const { isValid } = validateProductData(editedData);\n    if (!isValid) {\n      toast.error('Please fix the validation errors');\n      return;\n    }\n\n    // Show confirmation modal\n    setEditModal({ isOpen: true, productId, data: editedData });\n  };\n\n  // Handle edit confirmation\n  const handleEditConfirm = async () => {\n    const { productId, data: editedData } = editModal;\n    setIsEditing(true);\n\n    try {\n      const { error } = await supabase\n        .from('products')\n        .update(editedData)\n        .eq('productid', productId);\n\n      if (error) {\n        throw error;\n      }\n\n      // Update local state\n      setProducts(prev =>\n        prev.map(p =>\n          p.productid === productId ? { ...p, ...editedData } : p\n        )\n      );\n\n      toast.success('Product updated successfully');\n      setEditingId(null);\n      setEditModal({ isOpen: false, productId: null, data: null });\n    } catch (error) {\n      console.error('Error updating product:', error);\n      toast.error('Failed to update product');\n    } finally {\n      setIsEditing(false);\n    }\n  };\n\n  // Generate page numbers\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    for (let i = 0; i < totalPages; i++) {\n      pageNumbers.push(i);\n    }\n    return pageNumbers;\n  };\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <Toaster position=\"top-right\" />\n      <Modal\n        isOpen={deleteModal.isOpen}\n        onClose={() => setDeleteModal({ isOpen: false, product: null })}\n        onConfirm={() => deleteProduct(deleteModal.product?.productid)}\n        title=\"Confirm Deletion\"\n        message={`Are you sure you want to delete \"${deleteModal.product?.productname}\"? This action cannot be undone.`}\n        confirmText=\"Delete\"\n        confirmStyle=\"bg-red-600 hover:bg-red-700\"\n      />\n\n      <Modal\n        isOpen={editModal.isOpen}\n        onClose={() => {\n          setEditModal({ isOpen: false, productId: null, data: null });\n          setEditingId(null);\n        }}\n        onConfirm={handleEditConfirm}\n        title=\"Confirm Edit\"\n        message=\"Are you sure you want to save these changes?\"\n        confirmText=\"Save Changes\"\n        confirmStyle=\"bg-green-600 hover:bg-green-700\"\n      />\n      \n      <AddProductModal\n        isOpen={addModal}\n        onClose={() => setAddModal(false)}\n        onAdd={handleAddProduct}\n        isLoading={isAddingProduct}\n      />\n      \n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-3xl font-bold text-rose-700\">Product List</h2>\n        <button\n          onClick={() => setAddModal(true)}\n          className=\"px-4 py-2 bg-rose-600 text-white rounded hover:bg-rose-700 transition-colors\"\n        >\n          Add Product\n        </button>\n      </div>\n  \n      {isLoading ? (\n        <p className=\"text-gray-500\">Loading products...</p>\n      ) : products.length === 0 ? (\n        <p className=\"text-gray-500\">No products found.</p>\n      ) : (\n        <>\n          <ProductTable\n            products={products}\n            onDelete={handleDelete}\n            onEdit={handleEdit}\n            isEditing={isEditing}\n            editingId={editingId}\n          />\n          \n          {/* Pagination Controls */}\n          <div className=\"flex flex-col items-center gap-4 mt-4\">\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => setPage(p => Math.max(0, p - 1))}\n                disabled={page === 0}\n                className={`px-3 py-1 rounded ${\n                  page === 0\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Previous\n              </button>\n              \n              {getPageNumbers().map((pageNum) => (\n                <button\n                  key={pageNum}\n                  onClick={() => setPage(pageNum)}\n                  className={`px-3 py-1 rounded ${\n                    page === pageNum\n                      ? 'bg-rose-600 text-white'\n                      : 'bg-gray-100 hover:bg-gray-200'\n                  }`}\n                >\n                  {pageNum + 1}\n                </button>\n              ))}\n\n              <button\n                onClick={() => setPage(p => p + 1)}\n                disabled={page >= totalPages - 1}\n                className={`px-3 py-1 rounded ${\n                  page >= totalPages - 1\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Next\n              </button>\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              Showing {page * itemsPerPage + 1} to {Math.min((page + 1) * itemsPerPage, totalCount)} of {totalCount} items\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Products;\n",
  "pages/SalesForm.jsx": "import React from 'react';\nimport SalesFormContainer from '../components/SalesFormContainer';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nexport default function SalesForm() {\n  return (\n    <div className=\"max-w-5xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-rose-700\">Record Sale</h1>\n        <p className=\"mt-2 text-sm text-gray-600\">\n          Enter the sale details below. Add products and quantities as needed.\n        </p>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <ErrorBoundary>\n          <SalesFormContainer />\n        </ErrorBoundary>\n      </div>\n\n      <style>\n        {`\n          .react-select-container .react-select__control {\n            border: 1px solid #d1d5db;\n            border-radius: 0.5rem;\n            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n          }\n          .react-select-container .react-select__control:focus-within {\n            border-color: #f43f5e;\n            box-shadow: 0 0 0 1px #f43f5e;\n          }\n          .react-select-container .react-select__menu {\n            background-color: white;\n            border: 1px solid #d1d5db;\n            border-radius: 0.5rem;\n            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n          }\n          .react-select-container .react-select__option {\n            padding: 0.5rem 0.75rem;\n            cursor: pointer;\n          }\n          .react-select-container .react-select__option:hover {\n            background-color: #f3f4f6;\n          }\n          .react-select-container .react-select__option--is-focused {\n            background-color: #f3f4f6;\n          }\n          .react-select-container .react-select__option--is-selected {\n            background-color: #ffe4e6;\n            color: #881337;\n          }\n        `}\n      </style>\n    </div>\n  );\n} ",
  "pages/SalesTracker.jsx": "import React, { useEffect, useState } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { useLocation } from 'react-router-dom';\nimport 'chart.js/auto';\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nexport default function SalesTracker() {\n  const query = useQuery();\n  const period = query.get('period') || 'daily';\n\n  const [sales, setSales] = useState([]);\n  const [totals, setTotals] = useState({ daily: 0, weekly: 0, monthly: 0, quarterly: 0 });\n  const [topLocation, setTopLocation] = useState(null);\n  const [locationChartData, setLocationChartData] = useState(null);\n\n  const defaultChartData = {\n    labels: [],\n    datasets: [{\n      label: 'Sales Data',\n      data: [],\n      borderColor: '#fb923c',\n      backgroundColor: 'rgba(251, 146, 60, 0.2)'\n    }]\n  };\n\n  const [chartData, setChartData] = useState(defaultChartData);\n\n  useEffect(() => {\n    const loadSalesData = async () => {\n      const { data } = await fetchSalesData();\n      setSales(data);\n      calculateTotals(data);\n      prepareTrendChart(data);\n      prepareLocationChart(data);\n    };\n\n    loadSalesData();\n\n    const handleSalesUpdate = () => loadSalesData();\n    window.addEventListener('salesUpdated', handleSalesUpdate);\n    return () => window.removeEventListener('salesUpdated', handleSalesUpdate);\n  }, [period]);\n\n  const fetchSalesData = async () => {\n    return {\n      data: JSON.parse(localStorage.getItem('sales')) || [],\n      error: null\n    };\n  };\n\n  const calculateTotals = (data) => {\n    const today = new Date().toISOString().split('T')[0];\n    const now = new Date();\n\n    const last7Days = new Date(now - 7 * 86400000);\n    const last30Days = new Date(now - 30 * 86400000);\n    const last90Days = new Date(now - 90 * 86400000);\n\n    const dailySales = data.filter(sale => sale.saledate === today);\n    const weeklySales = data.filter(sale => new Date(sale.saledate) >= last7Days);\n    const monthlySales = data.filter(sale => new Date(sale.saledate) >= last30Days);\n    const quarterlySales = data.filter(sale => new Date(sale.saledate) >= last90Days);\n\n    setTotals({\n      daily: dailySales.reduce((sum, s) => sum + s.saletotal, 0),\n      weekly: weeklySales.reduce((sum, s) => sum + s.saletotal, 0),\n      monthly: monthlySales.reduce((sum, s) => sum + s.saletotal, 0),\n      quarterly: quarterlySales.reduce((sum, s) => sum + s.saletotal, 0)\n    });\n  };\n\n  const prepareTrendChart = (data) => {\n    const days = period === 'daily' || period === 'weekly' ? 7 : period === 'monthly' ? 30 : 90;\n    const labels = Array.from({ length: days }, (_, i) => {\n      const d = new Date(Date.now() - (days - 1 - i) * 86400000);\n      return d.toISOString().split('T')[0];\n    });\n\n    const values = labels.map(date =>\n      data.filter(s => s.saledate === date).reduce((sum, s) => sum + s.saletotal, 0)\n    );\n\n    setChartData({\n      labels,\n      datasets: [{\n        label: `${period.charAt(0).toUpperCase() + period.slice(1)} Sales Trends`,\n        data: values,\n        borderColor: '#fb923c',\n        backgroundColor: 'rgba(251, 146, 60, 0.2)'\n      }]\n    });\n  };\n\n  const prepareLocationChart = (data) => {\n    const totalsByLocation = data.reduce((acc, sale) => {\n      const location = sale.locationid || 'Unknown';\n      if (!acc[location]) acc[location] = 0;\n      acc[location] += sale.saletotal;\n      return acc;\n    }, {});\n\n    const top = Object.entries(totalsByLocation).reduce((max, curr) => curr[1] > max[1] ? curr : max, [\"None\", 0]);\n\n    setTopLocation(top);\n\n    setLocationChartData({\n      labels: Object.keys(totalsByLocation),\n      datasets: [{\n        label: 'Sales by Location',\n        data: Object.values(totalsByLocation),\n        backgroundColor: '#60a5fa'\n      }]\n    });\n  };\n\n  const chartTitle = {\n    daily: '\ud83d\udcc8 Daily Sales Trends (Last 7 Days)',\n    weekly: '\ud83d\udcca Weekly Sales Trends',\n    monthly: '\ud83d\udcc6 30-Day Sales Trends',\n    quarterly: '\ud83d\udcca Quarterly Sales Trends'\n  }[period];\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 bg-white shadow rounded-lg\">\n      <h1 className=\"text-3xl font-bold text-rose-700 mb-6\">\ud83d\udcca Sales Tracker</h1>\n\n      {/* Totals + Top Location Chart */}\n<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n  <Card title=\"\ud83d\udcc5 Daily Sales\" value={totals.daily} color=\"rose\" />\n  <Card title=\"\ud83d\udcc8 Weekly Sales\" value={totals.weekly} color=\"blue\" />\n  <Card title=\"\ud83d\udcca 30-Day Sales\" value={totals.monthly} color=\"green\" />\n  <Card title=\"\ud83d\udcc6 Quarterly Sales\" value={totals.quarterly} color=\"yellow\" />\n  \n  <div className=\"bg-purple-100 text-purple-600 p-4 rounded-lg col-span-1\">\n    <h2 className=\"text-md font-semibold mb-2\">\ud83d\udccd Top Location</h2>\n    {topLocation ? (\n      <div className=\"mb-2 font-medium\">\n        {topLocation[0]} \u2014 <strong>${topLocation[1].toFixed(2)}</strong>\n      </div>\n    ) : (\n      <p>No data yet</p>\n    )}\n    {locationChartData?.datasets?.length ? (\n      <Bar\n        data={locationChartData}\n        options={{\n          plugins: { legend: { display: false } },\n          scales: {\n            x: { display: false },\n            y: { display: false }\n          },\n        }}\n      />\n    ) : null}\n  </div>\n</div>\n\n      {/* Line Graph */}\n      <div className=\"bg-white p-4 rounded-lg shadow mb-10\">\n        <h2 className=\"text-xl font-semibold mb-4\">{chartTitle}</h2>\n        <Line data={chartData} />\n      </div>\n\n      {/* Location-Based Graph */}\n      <div className=\"bg-white p-4 rounded-lg shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">\ud83d\udccd Sales by Location</h2>\n        {topLocation && (\n          <div className=\"mb-4 text-green-700 font-medium\">\n            \ud83c\udfc6 Top Location: <strong>{topLocation[0]}</strong> (${topLocation[1].toFixed(2)})\n          </div>\n        )}\n        {locationChartData?.datasets?.length ? (\n          <Bar data={locationChartData} />\n        ) : (\n          <p className=\"text-center text-gray-500\">\ud83d\udcc9 No sales data available</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction Card({ title, value, color }) {\n  const bg = {\n    rose: 'bg-rose-100 text-rose-600',\n    blue: 'bg-blue-100 text-blue-600',\n    green: 'bg-green-100 text-green-600',\n    yellow: 'bg-yellow-100 text-yellow-600',\n    purple: 'bg-purple-100 text-purple-600'\n  }[color] || 'bg-gray-100 text-gray-600';\n\n  return (\n    <div className={`p-4 rounded-lg ${bg}`}>\n      <h2 className=\"text-lg font-semibold\">{title}</h2>\n      <p className=\"text-xl font-bold\">${value.toFixed(2)}</p>\n    </div>\n  );\n}\n",
  "pages/Timetable.jsx": "import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { supabase } from '../lib/supabase/supabaseClient';\n\nconst Timetable = () => {\n  const [entries, setEntries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch timetable data from Supabase, joining with employees and locations\n  const fetchTimetable = async () => {\n    try {\n      setIsLoading(true);\n      const { data, error } = await supabase\n        .from('employee_hours')\n        .select('*, employee:employees(firstname, employeeid), location:locations(locationname)');\n      if (error) throw error;\n      setEntries(data);\n    } catch (error) {\n      console.error('Error fetching timetable data:', error);\n      toast.error('Error fetching timetable data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTimetable();\n  }, []);\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-rose-700 mb-6\">Employee Timetable</h2>\n      {isLoading ? (\n        <p className=\"text-gray-500\">Loading timetable...</p>\n      ) : entries.length === 0 ? (\n        <p className=\"text-gray-500\">No timetable entries found.</p>\n      ) : (\n        <table className=\"min-w-full bg-white border border-gray-200\">\n          <thead>\n            <tr>\n              <th className=\"py-2 px-4 border-b\">Employee ID</th>\n              <th className=\"py-2 px-4 border-b\">Employee Name</th>\n              <th className=\"py-2 px-4 border-b\">Date Worked</th>\n              <th className=\"py-2 px-4 border-b\">Hours Worked</th>\n              <th className=\"py-2 px-4 border-b\">Location</th>\n              <th className=\"py-2 px-4 border-b\">Pay Rate</th>\n            </tr>\n          </thead>\n          <tbody>\n            {entries.map((entry) => (\n              <tr key={entry.hoursid} className=\"text-center\">\n                <td className=\"py-2 px-4 border-b\">\n                  {entry.employee ? entry.employee.employeeid : entry.employeeid}\n                </td>\n                <td className=\"py-2 px-4 border-b\">\n                  {entry.employee ? entry.employee.firstname : 'N/A'}\n                </td>\n                <td className=\"py-2 px-4 border-b\">{entry.dateworked}</td>\n                <td className=\"py-2 px-4 border-b\">{entry.hoursworked}</td>\n                <td className=\"py-2 px-4 border-b\">\n                  {entry.location ? entry.location.locationname : entry.locationid}\n                </td>\n                <td className=\"py-2 px-4 border-b\">{entry.payrateattime}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default Timetable;\n",
  "pages/Unauthorized.jsx": "import React from 'react';\n\nexport default function Unauthorized() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen text-center px-4\">\n      <h1 className=\"text-4xl font-bold text-red-600\">\ud83d\udeab Access Denied</h1>\n      <p className=\"text-gray-700 mt-4\">You don\u2019t have permission to view this page.</p>\n    </div>\n  );\n}\n",
  "pages/UserManagement.jsx": "import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { supabase } from '../lib/supabase/supabaseClient';\n\nconst UserManagement = () => {\n  const [employees, setEmployees] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // editingFields holds the updated values for each employee keyed by employeeid\n  const [editingFields, setEditingFields] = useState({});\n  // updateStatus holds temporary status messages for each employee row\n  const [updateStatus, setUpdateStatus] = useState({});\n\n  // Options for the dropdowns\n  const roleOptions = [\n    { value: 1, label: 'Admin' },\n    { value: 2, label: 'Sales Staff' },\n    { value: 3, label: 'Kitchen Staff' },\n  ];\n\n  const statusOptions = [\n    { value: 'Active', label: 'Active' },\n    { value: 'On Leave', label: 'On Leave' },\n    { value: 'Terminated', label: 'Terminated' },\n  ];\n\n  const employmentTypeOptions = [\n    { value: 'Full-Time', label: 'Full-Time' },\n    { value: 'Part-Time', label: 'Part-Time' },\n    { value: 'Contract', label: 'Contract' },\n  ];\n\n  // Fetch employees from Supabase\n  const fetchEmployees = async () => {\n    try {\n      setIsLoading(true);\n      const { data, error } = await supabase.from('employees').select('*');\n      if (error) throw error;\n      setEmployees(data);\n      // Initialize the editingFields state with current values from the DB\n      const initialEditing = {};\n      data.forEach(emp => {\n        initialEditing[emp.employeeid] = {\n          employmenttype: emp.employmenttype,\n          phone: emp.phone,\n          hourlywage: emp.hourlywage,\n          status: emp.status,\n          roleid: emp.roleid,\n        };\n      });\n      setEditingFields(initialEditing);\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      toast.error('Error fetching employees');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Update employee data in the database for all editable fields\n  const updateEmployeeData = async (employeeId) => {\n    const updatedData = editingFields[employeeId];\n    try {\n      const { error } = await supabase\n        .from('employees')\n        .update(updatedData)\n        .eq('employeeid', employeeId);\n      if (error) throw error;\n      toast.success('Employee updated');\n      // Update local state so the UI reflects the change\n      setEmployees((prev) =>\n        prev.map((emp) =>\n          emp.employeeid === employeeId ? { ...emp, ...updatedData } : emp\n        )\n      );\n      // Set a \"Saved\" status message for this employee row\n      setUpdateStatus((prev) => ({ ...prev, [employeeId]: 'Saved' }));\n      setTimeout(() => {\n        setUpdateStatus((prev) => {\n          const newStatus = { ...prev };\n          delete newStatus[employeeId];\n          return newStatus;\n        });\n      }, 3000);\n    } catch (error) {\n      console.error('Error updating employee:', error);\n      toast.error('Error updating employee');\n    }\n  };\n\n  // Handle change for any editable field in a row\n  const handleFieldChange = (employeeId, field, value) => {\n    setEditingFields((prev) => ({\n      ...prev,\n      [employeeId]: {\n        ...prev[employeeId],\n        [field]: value,\n      },\n    }));\n  };\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <h2 className=\"text-3xl font-bold text-rose-700 mb-6\">User Management</h2>\n      {isLoading ? (\n        <p className=\"text-gray-500\">Loading employees...</p>\n      ) : employees.length === 0 ? (\n        <p className=\"text-gray-500\">No employees found.</p>\n      ) : (\n        <table className=\"min-w-full bg-white border border-gray-200\">\n          <thead>\n            <tr>\n              <th className=\"py-2 px-4 border-b\">Employee ID</th>\n              <th className=\"py-2 px-4 border-b\">First Name</th>\n              <th className=\"py-2 px-4 border-b\">Last Name</th>\n              <th className=\"py-2 px-4 border-b\">Username</th>\n              <th className=\"py-2 px-4 border-b\">Employment Type</th>\n              <th className=\"py-2 px-4 border-b\">Phone</th>\n              <th className=\"py-2 px-4 border-b\">Hourly Wage</th>\n              <th className=\"py-2 px-4 border-b\">Status</th>\n              <th className=\"py-2 px-4 border-b\">Role</th>\n              <th className=\"py-2 px-4 border-b\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {employees.map((emp) => (\n              <tr key={emp.employeeid} className=\"text-center\">\n                <td className=\"py-2 px-4 border-b\">{emp.employeeid}</td>\n                <td className=\"py-2 px-4 border-b\">{emp.firstname}</td>\n                <td className=\"py-2 px-4 border-b\">{emp.lastname}</td>\n                <td className=\"py-2 px-4 border-b\">{emp.username}</td>\n                <td className=\"py-2 px-4 border-b\">\n                  <select\n                    value={editingFields[emp.employeeid]?.employmenttype || ''}\n                    onChange={(e) =>\n                      handleFieldChange(emp.employeeid, 'employmenttype', e.target.value)\n                    }\n                    className=\"border rounded p-1\"\n                  >\n                    {employmentTypeOptions.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </td>\n                <td className=\"py-2 px-4 border-b\">\n                  <input\n                    type=\"tel\"\n                    value={editingFields[emp.employeeid]?.phone || ''}\n                    onChange={(e) =>\n                      handleFieldChange(emp.employeeid, 'phone', e.target.value)\n                    }\n                    className=\"border rounded p-1 w-30\"\n                    placeholder=\"905-343-3434\"\n                    pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                  />\n                </td>\n                <td className=\"py-2 px-4 border-b\">\n                  <input\n                    type=\"number\"\n                    value={editingFields[emp.employeeid]?.hourlywage || ''}\n                    onChange={(e) =>\n                      handleFieldChange(emp.employeeid, 'hourlywage', parseFloat(e.target.value))\n                    }\n                    className=\"border rounded p-1 w-20\"\n                    step=\"0.01\"\n                    style={{ MozAppearance: 'textfield', WebkitAppearance: 'none' }}\n                  />\n                </td>\n                <td className=\"py-2 px-4 border-b\">\n                  <select\n                    value={editingFields[emp.employeeid]?.status || ''}\n                    onChange={(e) =>\n                      handleFieldChange(emp.employeeid, 'status', e.target.value)\n                    }\n                    className=\"border rounded p-1\"\n                  >\n                    {statusOptions.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </td>\n                <td className=\"py-2 px-4 border-b\">\n                  <select\n                    value={editingFields[emp.employeeid]?.roleid || ''}\n                    onChange={(e) =>\n                      handleFieldChange(emp.employeeid, 'roleid', parseInt(e.target.value))\n                    }\n                    className=\"border rounded p-1\"\n                  >\n                    {roleOptions.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </td>\n                <td className=\"py-2 px-4 border-b flex items-center justify-center space-x-2\">\n                  <button\n                    onClick={() => updateEmployeeData(emp.employeeid)}\n                    className=\"bg-rose-600 hover:bg-rose-700 text-white py-1 px-3 rounded\"\n                  >\n                    Save\n                  </button>\n                  {updateStatus[emp.employeeid] && (\n                    <span className=\"text-green-600 font-semibold\">\n                      {updateStatus[emp.employeeid]}\n                    </span>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default UserManagement;\n",
  "utils/formatters.js": "export const formatPrice = (price) => {\n  return typeof price === 'number' ? `$${price.toFixed(2)}` : 'N/A';\n};\n\nexport const validateProductData = (data) => {\n  const errors = {};\n  \n  if (!data.productname?.trim()) {\n    errors.productname = 'Product name is required';\n  }\n  if (!data.category?.trim()) {\n    errors.category = 'Category is required';\n  }\n  if (!data.price || isNaN(data.price) || Number(data.price) <= 0) {\n    errors.price = 'Valid price is required';\n  }\n  if (!data.stockquantity || isNaN(data.stockquantity) || Number(data.stockquantity) < 0) {\n    errors.stockquantity = 'Valid stock quantity is required';\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n}; "
}