{
  "App.css": "#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n",
  "App.jsx": "import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport Products from './pages/Products';\nimport Ingredients from './pages/Ingredients';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"bg-white shadow p-4 mb-4 flex gap-4\">\n        <Link to=\"/\" className=\"text-blue-600 hover:underline\">Dashboard</Link>\n        <Link to=\"/products\" className=\"text-blue-600 hover:underline\">Products</Link>\n        <Link to=\"/ingredients\" className=\"text-blue-600 hover:underline\">Ingredients</Link>\n      </div>\n      <Routes>\n        <Route path=\"/\" element={<h1 className=\"text-2xl text-center\">Welcome to Aunt Rosie's</h1>} />\n        <Route path=\"/products\" element={<Products />} />\n        <Route path=\"/ingredients\" element={<Ingredients />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n",
  "index.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",
  "main.jsx": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n",
  "components/AddIngredientModal.jsx": "import Modal from './Modal';\nimport IngredientForm from './IngredientForm';\n\nconst AddIngredientModal = ({ isOpen, onClose, onSubmit, isLoading }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Add New Ingredient\"\n      size=\"lg\"\n    >\n      <div className=\"p-6\">\n        <IngredientForm\n          onSubmit={onSubmit}\n          onCancel={onClose}\n          isLoading={isLoading}\n          submitLabel=\"Add Ingredient\"\n        />\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddIngredientModal; ",
  "components/AddProductModal.jsx": "import ProductForm from './ProductForm';\n\nconst AddProductModal = ({ isOpen, onClose, onAdd, isLoading }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Add New Product</h3>\n        <ProductForm\n          onSubmit={onAdd}\n          onCancel={onClose}\n          isLoading={isLoading}\n          submitLabel=\"Add Product\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AddProductModal; ",
  "components/EditIngredientModal.jsx": "import Modal from './Modal';\nimport IngredientForm from './IngredientForm';\n\nconst EditIngredientModal = ({ isOpen, onClose, onSubmit, isLoading, ingredient }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Edit Ingredient\"\n      size=\"lg\"\n    >\n      <div className=\"p-6\">\n        <IngredientForm\n          initialData={ingredient}\n          onSubmit={onSubmit}\n          onCancel={onClose}\n          isLoading={isLoading}\n          submitLabel=\"Save Changes\"\n        />\n      </div>\n    </Modal>\n  );\n};\n\nexport default EditIngredientModal; ",
  "components/IngredientForm.jsx": "import { useState, useEffect } from 'react';\n\nconst initialFormData = {\n  ingredientname: '',\n  unitofmeasure: '',\n  currentstock: '',\n  reorderthreshold: '',\n  costperunit: ''\n};\n\nconst tooltips = {\n  ingredientname: 'Enter the name of the ingredient (2-100 characters)',\n  unitofmeasure: 'Unit of measurement (e.g., kg, g, L, ml)',\n  currentstock: 'Current quantity in stock',\n  reorderthreshold: 'Minimum quantity before reorder is needed',\n  costperunit: 'Cost per unit in dollars'\n};\n\nconst validateField = (name, value) => {\n  const errors = {};\n\n  switch (name) {\n    case 'ingredientname':\n      if (!value?.trim()) {\n        errors[name] = 'Ingredient name is required';\n      } else if (value.length < 2) {\n        errors[name] = 'Name must be at least 2 characters';\n      } else if (value.length > 100) {\n        errors[name] = 'Name must be less than 100 characters';\n      }\n      break;\n\n    case 'unitofmeasure':\n      if (!value?.trim()) {\n        errors[name] = 'Unit of measure is required';\n      } else if (value.length > 10) {\n        errors[name] = 'Unit must be less than 10 characters';\n      }\n      break;\n\n    case 'currentstock':\n      if (value === '') {\n        errors[name] = 'Current stock is required';\n      } else if (isNaN(value) || Number(value) < 0) {\n        errors[name] = 'Stock must be a non-negative number';\n      } else if (Number(value) > 999999) {\n        errors[name] = 'Stock must be less than 1,000,000';\n      }\n      break;\n\n    case 'reorderthreshold':\n      if (value === '') {\n        errors[name] = 'Reorder threshold is required';\n      } else if (isNaN(value) || Number(value) < 0) {\n        errors[name] = 'Threshold must be a non-negative number';\n      } else if (Number(value) > 999999) {\n        errors[name] = 'Threshold must be less than 1,000,000';\n      }\n      break;\n\n    case 'costperunit':\n      if (value === '') {\n        errors[name] = 'Cost per unit is required';\n      } else if (isNaN(value) || Number(value) <= 0) {\n        errors[name] = 'Cost must be greater than 0';\n      } else if (Number(value) > 999999.99) {\n        errors[name] = 'Cost must be less than 1,000,000';\n      } else if (!/^\\d+(\\.\\d{0,2})?$/.test(value)) {\n        errors[name] = 'Cost can only have up to 2 decimal places';\n      }\n      break;\n  }\n\n  return errors;\n};\n\nconst IngredientForm = ({ initialData, onSubmit, onCancel, isLoading, submitLabel = 'Submit' }) => {\n  const [formData, setFormData] = useState(initialData || initialFormData);\n  const [errors, setErrors] = useState({});\n  const [touchedFields, setTouchedFields] = useState({});\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData(initialData);\n    }\n  }, [initialData]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleBlur = (e) => {\n    const { name } = e.target;\n    setTouchedFields(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    const fieldErrors = validateField(name, formData[name]);\n    setErrors(prev => ({\n      ...prev,\n      ...fieldErrors\n    }));\n  };\n\n  const validateForm = () => {\n    const allErrors = {};\n    Object.keys(formData).forEach(key => {\n      const fieldErrors = validateField(key, formData[key]);\n      Object.assign(allErrors, fieldErrors);\n    });\n    setErrors(allErrors);\n    return Object.keys(allErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    const allTouched = Object.keys(formData).reduce((acc, key) => ({\n      ...acc,\n      [key]: true\n    }), {});\n    setTouchedFields(allTouched);\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    const ingredientData = {\n      ...formData,\n      currentstock: Number(formData.currentstock),\n      reorderthreshold: Number(formData.reorderthreshold),\n      costperunit: Number(formData.costperunit)\n    };\n\n    onSubmit(ingredientData);\n  };\n\n  const renderField = (name, label, type = 'text') => (\n    <div>\n      <label htmlFor={name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n        {label} *\n        <span className=\"ml-1 text-gray-400 hover:text-gray-600 cursor-help\" title={tooltips[name]}>\n          \u24d8\n        </span>\n      </label>\n      <input\n        type={type}\n        id={name}\n        name={name}\n        value={formData[name]}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        className={`w-full px-3 py-2 border rounded-md ${\n          touchedFields[name] && errors[name] ? 'border-red-500' : 'border-gray-300'\n        } focus:outline-none focus:ring-1 focus:ring-rose-500`}\n      />\n      {touchedFields[name] && errors[name] && (\n        <p className=\"text-red-500 text-xs mt-1\">{errors[name]}</p>\n      )}\n    </div>\n  );\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {renderField('ingredientname', 'Ingredient Name')}\n      {renderField('unitofmeasure', 'Unit of Measure')}\n      {renderField('currentstock', 'Current Stock', 'number')}\n      {renderField('reorderthreshold', 'Reorder Threshold', 'number')}\n      {renderField('costperunit', 'Cost per Unit', 'number')}\n\n      <div className=\"flex justify-end gap-3 mt-6\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded\"\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className={`px-4 py-2 text-white rounded flex items-center ${\n            isLoading ? 'bg-rose-400 cursor-not-allowed' : 'bg-rose-600 hover:bg-rose-700'\n          }`}\n        >\n          {isLoading ? (\n            <>\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Processing...\n            </>\n          ) : (\n            submitLabel\n          )}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default IngredientForm; ",
  "components/IngredientTable.jsx": "import { useState } from 'react';\nimport ThresholdBadge from './ThresholdBadge';\n\nconst IngredientTable = ({ \n  ingredients, \n  onDelete, \n  onEdit,\n  isEditing,\n  editingId\n}) => {\n  const [editData, setEditData] = useState(null);\n  \n  const handleDoubleClick = (ingredient) => {\n    if (!isEditing) {\n      setEditData({...ingredient});\n      onEdit(ingredient.IngredientID);\n    }\n  };\n\n  const handleChange = (field, value) => {\n    setEditData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      onEdit(editingId, editData);\n    } else if (e.key === 'Escape') {\n      setEditData(null);\n      onEdit(null);\n    }\n  };\n\n  const formatCurrency = (value) => {\n    if (value === null || value === undefined || isNaN(value)) return '$0.00';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const renderCell = (ingredient, field, value) => {\n    if (editingId === ingredient.IngredientID) {\n      if (!editData) {\n        setEditData({...ingredient});\n        return value;\n      }\n\n      const type = field === 'CostPerUnit' || field === 'CurrentStock' || field === 'ReorderThreshold' ? 'number' : 'text';\n      const step = field === 'CostPerUnit' ? '0.01' : '1';\n      \n      return (\n        <input\n          type={type}\n          value={editData[field] ?? ''}\n          onChange={(e) => handleChange(field, e.target.value)}\n          onKeyDown={handleKeyDown}\n          step={type === 'number' ? step : undefined}\n          className=\"w-full px-2 py-1 border rounded\"\n          autoFocus={field === 'IngredientName'}\n        />\n      );\n    }\n\n    // Special rendering for different field types\n    if (field === 'CostPerUnit') {\n      return formatCurrency(value);\n    }\n\n    return value ?? '';\n  };\n\n  return (\n    <table className=\"w-full border text-sm mb-4\">\n      <thead className=\"bg-slate-100\">\n        <tr>\n          <th className=\"text-left p-2 font-bold\">Name</th>\n          <th className=\"text-left p-2 font-bold\">Unit</th>\n          <th className=\"text-left p-2 font-bold\">Stock</th>\n          <th className=\"text-left p-2 font-bold\">Reorder At</th>\n          <th className=\"text-left p-2 font-bold\">Cost/Unit</th>\n          <th className=\"text-left p-2 font-bold\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ingredients.map((ingredient) => (\n          <tr \n            key={ingredient.IngredientID} \n            className={`border-t hover:bg-gray-50 ${editingId === ingredient.IngredientID ? 'bg-blue-50' : ''}`}\n            onDoubleClick={() => handleDoubleClick(ingredient)}\n          >\n            <td className=\"p-2\">{renderCell(ingredient, 'IngredientName', ingredient.IngredientName)}</td>\n            <td className=\"p-2\">{renderCell(ingredient, 'UnitOfMeasure', ingredient.UnitOfMeasure)}</td>\n            <td className=\"p-2\">\n              <div className=\"flex items-center gap-2\">\n                {renderCell(ingredient, 'CurrentStock', ingredient.CurrentStock)}\n                <ThresholdBadge\n                  currentStock={ingredient.CurrentStock}\n                  reorderThreshold={ingredient.ReorderThreshold}\n                />\n              </div>\n            </td>\n            <td className=\"p-2\">{renderCell(ingredient, 'ReorderThreshold', ingredient.ReorderThreshold)}</td>\n            <td className=\"p-2\">{renderCell(ingredient, 'CostPerUnit', ingredient.CostPerUnit)}</td>\n            <td className=\"p-2\">\n              <button\n                onClick={() => onDelete(ingredient)}\n                className=\"text-red-600 hover:text-red-900\"\n              >\n                Delete\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default IngredientTable; ",
  "components/Modal.jsx": "const Modal = ({ \n  isOpen, \n  onClose, \n  onConfirm, \n  title, \n  message, \n  confirmText = 'Delete',\n  confirmStyle = 'bg-red-600 hover:bg-red-700'\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-sm w-full mx-4\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">{title}</h3>\n        <p className=\"text-gray-600 mb-6\">{message}</p>\n        <div className=\"flex justify-end gap-3\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={onConfirm}\n            className={`px-4 py-2 text-white rounded ${confirmStyle}`}\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal; ",
  "components/ProductForm.jsx": "import { useState, useEffect } from 'react';\n\nconst initialFormData = {\n  productname: '',\n  category: '',\n  size: '',\n  price: '',\n  description: '',\n  stockquantity: '',\n  allergeninfo: '',\n  dietaryinfo: ''\n};\n\nconst tooltips = {\n  productname: 'Enter the full name of the product (2-100 characters)',\n  category: 'Product category (e.g., Pies, Preserves, Cookies)',\n  size: 'Product size or weight (e.g., 250g, 500ml)',\n  price: 'Product price in dollars (up to 2 decimal places)',\n  stockquantity: 'Available quantity in stock (whole numbers only)',\n  description: 'Brief description of the product',\n  allergeninfo: 'List any allergens (e.g., Contains: wheat, eggs, dairy)',\n  dietaryinfo: 'Dietary information (e.g., Vegetarian, Vegan, Gluten-Free)'\n};\n\nconst ProductForm = ({ initialData, onSubmit, onCancel, isLoading, submitLabel = 'Submit' }) => {\n  const [formData, setFormData] = useState(initialData || initialFormData);\n  const [errors, setErrors] = useState({});\n  const [touchedFields, setTouchedFields] = useState({});\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData(initialData);\n    }\n  }, [initialData]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleBlur = (e) => {\n    const { name } = e.target;\n    setTouchedFields(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    validateField(name, formData[name]);\n  };\n\n  const validateField = (name, value) => {\n    const newError = {};\n    \n    switch (name) {\n      case 'productname':\n        if (!value.trim()) {\n          newError[name] = 'Product name is required';\n        } else if (value.length < 2) {\n          newError[name] = 'Product name must be at least 2 characters';\n        } else if (value.length > 100) {\n          newError[name] = 'Product name must be less than 100 characters';\n        }\n        break;\n      \n      case 'category':\n        if (!value.trim()) {\n          newError[name] = 'Category is required';\n        } else if (value.length > 50) {\n          newError[name] = 'Category must be less than 50 characters';\n        }\n        break;\n      \n      case 'price':\n        if (!value) {\n          newError[name] = 'Price is required';\n        } else if (isNaN(value) || Number(value) <= 0) {\n          newError[name] = 'Price must be greater than 0';\n        } else if (Number(value) > 999999.99) {\n          newError[name] = 'Price must be less than 1,000,000';\n        } else if (!/^\\d+(\\.\\d{0,2})?$/.test(value)) {\n          newError[name] = 'Price can only have up to 2 decimal places';\n        }\n        break;\n      \n      case 'stockquantity':\n        if (!value) {\n          newError[name] = 'Stock quantity is required';\n        } else if (isNaN(value) || !Number.isInteger(Number(value))) {\n          newError[name] = 'Stock quantity must be a whole number';\n        } else if (Number(value) < 0) {\n          newError[name] = 'Stock quantity cannot be negative';\n        } else if (Number(value) > 999999) {\n          newError[name] = 'Stock quantity must be less than 1,000,000';\n        }\n        break;\n      \n      case 'size':\n        if (value && value.length > 20) {\n          newError[name] = 'Size must be less than 20 characters';\n        }\n        break;\n      \n      case 'description':\n        if (value && value.length > 255) {\n          newError[name] = 'Description must be less than 255 characters';\n        }\n        break;\n\n      case 'allergeninfo':\n        if (value && value.length > 255) {\n          newError[name] = 'Allergen info must be less than 255 characters';\n        }\n        break;\n\n      case 'dietaryinfo':\n        if (value && value.length > 255) {\n          newError[name] = 'Dietary info must be less than 255 characters';\n        }\n        break;\n    }\n\n    setErrors(prev => ({\n      ...prev,\n      ...newError\n    }));\n    return !newError[name];\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    let isValid = true;\n    \n    Object.keys(formData).forEach(key => {\n      if (!validateField(key, formData[key])) {\n        isValid = false;\n      }\n    });\n\n    setErrors(newErrors);\n    return isValid;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    const allTouched = Object.keys(formData).reduce((acc, key) => ({\n      ...acc,\n      [key]: true\n    }), {});\n    setTouchedFields(allTouched);\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    const productData = {\n      ...formData,\n      price: Number(formData.price),\n      stockquantity: Number(formData.stockquantity)\n    };\n\n    onSubmit(productData);\n  };\n\n  const renderField = (name, label, type = 'text', isTextArea = false) => {\n    const Component = isTextArea ? 'textarea' : 'input';\n    return (\n      <div>\n        <label htmlFor={name} className=\"block text-sm font-medium text-gray-700 mb-1\">\n          {label}\n          {(name === 'productname' || name === 'category' || name === 'price' || name === 'stockquantity') && ' *'}\n          <span className=\"ml-1 text-gray-400 hover:text-gray-600 cursor-help\" title={tooltips[name]}>\n            \u24d8\n          </span>\n        </label>\n        <Component\n          type={type}\n          id={name}\n          name={name}\n          value={formData[name]}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          rows={isTextArea ? \"3\" : undefined}\n          className={`w-full px-3 py-2 border rounded-md ${\n            touchedFields[name] && errors[name] ? 'border-red-500' : 'border-gray-300'\n          } focus:outline-none focus:ring-1 focus:ring-rose-500`}\n        />\n        {touchedFields[name] && errors[name] && (\n          <p className=\"text-red-500 text-xs mt-1\">{errors[name]}</p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {renderField('productname', 'Product Name')}\n      {renderField('category', 'Category')}\n      {renderField('size', 'Size')}\n      {renderField('price', 'Price', 'number')}\n      {renderField('stockquantity', 'Stock Quantity', 'number')}\n      {renderField('description', 'Description', 'text', true)}\n      {renderField('allergeninfo', 'Allergen Information')}\n      {renderField('dietaryinfo', 'Dietary Information')}\n\n      <div className=\"flex justify-end gap-3 mt-6\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded\"\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className={`px-4 py-2 text-white rounded flex items-center ${\n            isLoading ? 'bg-rose-400 cursor-not-allowed' : 'bg-rose-600 hover:bg-rose-700'\n          }`}\n        >\n          {isLoading ? (\n            <>\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Processing...\n            </>\n          ) : (\n            submitLabel\n          )}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ProductForm; ",
  "components/ProductTable.jsx": "import { useState } from 'react';\nimport { formatPrice } from '../utils/formatters';\n\nconst ProductTable = ({ \n  products, \n  onDelete, \n  onEdit,\n  isEditing,\n  editingId\n}) => {\n  const [editData, setEditData] = useState(null);\n  \n  const handleDoubleClick = (product) => {\n    if (!isEditing) {\n      setEditData({...product});\n      onEdit(product.productid);\n    }\n  };\n\n  const handleChange = (field, value) => {\n    setEditData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Escape') {\n      setEditData(null);\n      onEdit(null);\n    }\n  };\n\n  const renderCell = (product, field, value) => {\n    if (editingId === product.productid) {\n      if (!editData) {\n        setEditData({...product});\n        return value;\n      }\n\n      const type = field === 'price' || field === 'stockquantity' ? 'number' : 'text';\n      const step = field === 'price' ? '0.01' : '1';\n      \n      return (\n        <input\n          type={type}\n          value={editData[field] ?? ''}\n          onChange={(e) => handleChange(field, e.target.value)}\n          onKeyDown={handleKeyDown}\n          step={type === 'number' ? step : undefined}\n          className=\"w-full px-2 py-1 border rounded\"\n          autoFocus={field === 'productname'}\n        />\n      );\n    }\n\n    // Special rendering for different field types\n    if (field === 'price') {\n      return formatPrice(value);\n    }\n    if (field === 'description' && !value) {\n      return 'No description';\n    }\n    if (field === 'size' && !value) {\n      return 'N/A';\n    }\n    if (field === 'stockquantity' && value === null) {\n      return '0';\n    }\n\n    return value;\n  };\n\n  return (\n    <table className=\"w-full border text-sm mb-4\">\n      <thead className=\"bg-slate-100\">\n        <tr>\n          <th className=\"text-left p-2\">Name</th>\n          <th className=\"text-left p-2\">Category</th>\n          <th className=\"text-left p-2\">Size</th>\n          <th className=\"text-left p-2\">Price</th>\n          <th className=\"text-left p-2\">Stock</th>\n          <th className=\"text-left p-2\">Description</th>\n          <th className=\"text-left p-2\">Dietary Info</th>\n          <th className=\"text-left p-2\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {products.map((product) => (\n          <tr \n            key={product.productid} \n            className={`border-t hover:bg-gray-50 ${editingId === product.productid ? 'bg-blue-50' : ''}`}\n            onDoubleClick={() => handleDoubleClick(product)}\n          >\n            <td className=\"p-2\">{renderCell(product, 'productname', product.productname)}</td>\n            <td className=\"p-2\">{renderCell(product, 'category', product.category)}</td>\n            <td className=\"p-2\">{renderCell(product, 'size', product.size)}</td>\n            <td className=\"p-2\">{renderCell(product, 'price', product.price)}</td>\n            <td className=\"p-2\">{renderCell(product, 'stockquantity', product.stockquantity)}</td>\n            <td className=\"p-2\">{renderCell(product, 'description', product.description)}</td>\n            <td className=\"p-2\">\n              {product.allergeninfo && (\n                <div className=\"text-red-600 text-xs mb-1\">\n                  Allergens: {renderCell(product, 'allergeninfo', product.allergeninfo)}\n                </div>\n              )}\n              {product.dietaryinfo && (\n                <div className=\"text-green-600 text-xs\">\n                  {renderCell(product, 'dietaryinfo', product.dietaryinfo)}\n                </div>\n              )}\n            </td>\n            <td className=\"p-2\">\n              {editingId === product.productid ? (\n                <div className=\"flex gap-2\">\n                  <button\n                    className=\"text-green-600 hover:underline text-sm\"\n                    onClick={() => onEdit(product.productid, editData)}\n                  >\n                    Save\n                  </button>\n                  <button\n                    className=\"text-gray-600 hover:underline text-sm\"\n                    onClick={() => {\n                      setEditData(null);\n                      onEdit(null);\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              ) : (\n                <button\n                  className=\"text-red-500 hover:underline\"\n                  onClick={() => onDelete(product)}\n                >\n                  Delete\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default ProductTable; ",
  "components/ThresholdBadge.jsx": "const ThresholdBadge = ({ currentStock, reorderThreshold }) => {\n  if (currentStock === null || reorderThreshold === null) return null;\n\n  const stockLevel = currentStock / reorderThreshold;\n  \n  if (stockLevel <= 0.5) {\n    return (\n      <span className=\"px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full\">\n        Critical Stock\n      </span>\n    );\n  }\n  \n  if (stockLevel <= 1) {\n    return (\n      <span className=\"px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full\">\n        Low Stock\n      </span>\n    );\n  }\n\n  return null;\n};\n\nexport default ThresholdBadge; ",
  "lib/supabaseClient.js": "import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey) ",
  "lib/supabase/ingredients.js": "import { supabase } from '../supabaseClient';\n\nexport const fetchIngredients = async ({ page = 0, itemsPerPage = 5 } = {}) => {\n  try {\n    // Get total count\n    const { count, error: countError } = await supabase\n      .from('ingredients')\n      .select('*', { count: 'exact', head: true });\n\n    if (countError) {\n      throw countError;\n    }\n\n    // Get paginated data\n    const { data, error } = await supabase\n      .from('ingredients')\n      .select('*')\n      .range(page * itemsPerPage, (page + 1) * itemsPerPage - 1)\n      .order('ingredientid', { ascending: true });\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data,\n      count,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in fetchIngredients:', error.message);\n    return {\n      data: null,\n      count: 0,\n      error\n    };\n  }\n};\n\nexport const addIngredient = async (ingredientData) => {\n  try {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .insert([ingredientData])\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in addIngredient:', error.message);\n    return {\n      data: null,\n      error\n    };\n  }\n};\n\nexport const updateIngredient = async (id, ingredientData) => {\n  try {\n    const { data, error } = await supabase\n      .from('ingredients')\n      .update(ingredientData)\n      .eq('ingredientid', id)\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in updateIngredient:', error.message);\n    return {\n      data: null,\n      error\n    };\n  }\n};\n\nexport const deleteIngredient = async (id) => {\n  try {\n    const { error } = await supabase\n      .from('ingredients')\n      .delete()\n      .eq('ingredientid', id);\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      error: null\n    };\n  } catch (error) {\n    console.error('Error in deleteIngredient:', error.message);\n    return {\n      error\n    };\n  }\n}; ",
  "pages/Ingredients.jsx": "import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport IngredientTable from '../components/IngredientTable';\nimport AddIngredientModal from '../components/AddIngredientModal';\nimport Modal from '../components/Modal';\nimport {\n  fetchIngredients,\n  addIngredient,\n  updateIngredient,\n  deleteIngredient\n} from '../lib/supabase/ingredients';\n\nconst ITEMS_PER_PAGE = 5;\n\nconst Ingredients = () => {\n  const [ingredients, setIngredients] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState(0);\n  const [page, setPage] = useState(0);\n  const [deleteModal, setDeleteModal] = useState({ isOpen: false, ingredient: null });\n  const [editModal, setEditModal] = useState({ isOpen: false, ingredientId: null, data: null });\n  const [addModal, setAddModal] = useState(false);\n  const [isAddingIngredient, setIsAddingIngredient] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Calculate total pages\n  const totalPages = Math.ceil(totalCount / ITEMS_PER_PAGE);\n\n  // Reset editing state when page changes\n  useEffect(() => {\n    setEditingId(null);\n    setIsEditing(false);\n    setEditModal({ isOpen: false, ingredientId: null, data: null });\n  }, [page]);\n\n  const loadIngredients = async () => {\n    try {\n      setIsLoading(true);\n      const { data, count } = await fetchIngredients(page, ITEMS_PER_PAGE);\n      setIngredients(data);\n      setTotalCount(count);\n    } catch (error) {\n      console.error('Error loading ingredients:', error);\n      toast.error('Failed to load ingredients');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadIngredients();\n  }, [page]);\n\n  const handleAdd = async (data) => {\n    setIsAddingIngredient(true);\n    try {\n      await addIngredient(data);\n      toast.success('Ingredient added successfully');\n      setAddModal(false);\n      if (page === 0) {\n        loadIngredients();\n      } else {\n        setPage(0);\n      }\n    } catch (error) {\n      console.error('Error adding ingredient:', error);\n      toast.error('Failed to add ingredient');\n    } finally {\n      setIsAddingIngredient(false);\n    }\n  };\n\n  const handleEdit = async (ingredientId, editedData) => {\n    if (!ingredientId) {\n      setEditingId(null);\n      setIsEditing(false);\n      return;\n    }\n\n    if (!editedData) {\n      setEditingId(ingredientId);\n      setIsEditing(true);\n      return;\n    }\n\n    // Show confirmation modal\n    setEditModal({ isOpen: true, ingredientId, data: editedData });\n  };\n\n  const handleEditConfirm = async () => {\n    const { ingredientId, data: editedData } = editModal;\n    setIsEditing(true);\n\n    try {\n      // Convert string values to numbers where needed\n      const processedData = {\n        ...editedData,\n        CostPerUnit: parseFloat(editedData.CostPerUnit),\n        CurrentStock: parseInt(editedData.CurrentStock),\n        ReorderThreshold: parseInt(editedData.ReorderThreshold)\n      };\n\n      await updateIngredient(ingredientId, processedData);\n      \n      // Update local state\n      setIngredients(prev =>\n        prev.map(i =>\n          i.IngredientID === ingredientId ? { ...i, ...processedData } : i\n        )\n      );\n\n      toast.success('Ingredient updated successfully');\n      setEditingId(null);\n      setEditModal({ isOpen: false, ingredientId: null, data: null });\n    } catch (error) {\n      console.error('Error updating ingredient:', error);\n      toast.error('Failed to update ingredient');\n    } finally {\n      setIsEditing(false);\n    }\n  };\n\n  const handleDelete = (ingredient) => {\n    setDeleteModal({ isOpen: true, ingredient });\n  };\n\n  const handleDeleteConfirm = async () => {\n    try {\n      await deleteIngredient(deleteModal.ingredient.IngredientID);\n      toast.success('Ingredient deleted successfully');\n      setDeleteModal({ isOpen: false, ingredient: null });\n      \n      if (ingredients.length === 1 && page > 0) {\n        setPage(prev => prev - 1);\n      } else {\n        loadIngredients();\n      }\n    } catch (error) {\n      console.error('Error deleting ingredient:', error);\n      toast.error('Failed to delete ingredient');\n    }\n  };\n\n  // Generate page numbers\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    for (let i = 0; i < totalPages; i++) {\n      pageNumbers.push(i);\n    }\n    return pageNumbers;\n  };\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <Modal\n        isOpen={deleteModal.isOpen}\n        onClose={() => setDeleteModal({ isOpen: false, ingredient: null })}\n        onConfirm={handleDeleteConfirm}\n        title=\"Confirm Deletion\"\n        message={`Are you sure you want to delete \"${deleteModal.ingredient?.IngredientName}\"? This action cannot be undone.`}\n        confirmText=\"Delete\"\n        confirmStyle=\"bg-red-600 hover:bg-red-700\"\n      />\n\n      <Modal\n        isOpen={editModal.isOpen}\n        onClose={() => {\n          setEditModal({ isOpen: false, ingredientId: null, data: null });\n          setEditingId(null);\n        }}\n        onConfirm={handleEditConfirm}\n        title=\"Confirm Edit\"\n        message=\"Are you sure you want to save these changes?\"\n        confirmText=\"Save Changes\"\n        confirmStyle=\"bg-green-600 hover:bg-green-700\"\n      />\n      \n      <AddIngredientModal\n        isOpen={addModal}\n        onClose={() => setAddModal(false)}\n        onSubmit={handleAdd}\n        isLoading={isAddingIngredient}\n      />\n      \n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-3xl font-bold text-rose-700\">Ingredient List</h2>\n        <button\n          onClick={() => setAddModal(true)}\n          className=\"px-4 py-2 bg-rose-600 text-white rounded hover:bg-rose-700 transition-colors\"\n        >\n          Add Ingredient\n        </button>\n      </div>\n  \n      {isLoading ? (\n        <p className=\"text-gray-500\">Loading ingredients...</p>\n      ) : ingredients.length === 0 ? (\n        <p className=\"text-gray-500\">No ingredients found.</p>\n      ) : (\n        <>\n          <IngredientTable\n            ingredients={ingredients}\n            onDelete={handleDelete}\n            onEdit={handleEdit}\n            isEditing={isEditing}\n            editingId={editingId}\n          />\n          \n          {/* Pagination Controls */}\n          <div className=\"flex flex-col items-center gap-4 mt-4\">\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => setPage(p => Math.max(0, p - 1))}\n                disabled={page === 0}\n                className={`px-3 py-1 rounded ${\n                  page === 0\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Previous\n              </button>\n              \n              {getPageNumbers().map((pageNum) => (\n                <button\n                  key={pageNum}\n                  onClick={() => setPage(pageNum)}\n                  className={`px-3 py-1 rounded ${\n                    page === pageNum\n                      ? 'bg-rose-600 text-white'\n                      : 'bg-gray-100 hover:bg-gray-200'\n                  }`}\n                >\n                  {pageNum + 1}\n                </button>\n              ))}\n\n              <button\n                onClick={() => setPage(p => p + 1)}\n                disabled={page >= totalPages - 1}\n                className={`px-3 py-1 rounded ${\n                  page >= totalPages - 1\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Next\n              </button>\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              Showing {page * ITEMS_PER_PAGE + 1} to {Math.min((page + 1) * ITEMS_PER_PAGE, totalCount)} of {totalCount} items\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Ingredients; ",
  "pages/Products.jsx": "import { useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabaseClient';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Modal from '../components/Modal';\nimport AddProductModal from '../components/AddProductModal';\nimport ProductTable from '../components/ProductTable';\nimport { validateProductData } from '../utils/formatters';\n\nconst Products = () => {\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [totalCount, setTotalCount] = useState(0);\n  const [deleteModal, setDeleteModal] = useState({ isOpen: false, product: null });\n  const [editModal, setEditModal] = useState({ isOpen: false, productId: null, data: null });\n  const [addModal, setAddModal] = useState(false);\n  const [isAddingProduct, setIsAddingProduct] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const itemsPerPage = 5;\n\n  // Calculate total pages\n  const totalPages = Math.ceil(totalCount / itemsPerPage);\n\n  // Reset editing state when page changes\n  useEffect(() => {\n    setEditingId(null);\n    setIsEditing(false);\n    setEditModal({ isOpen: false, productId: null, data: null });\n  }, [page]);\n\n  // Fetch products on page load\n  useEffect(() => {\n    let mounted = true;\n\n    async function fetchProducts() {\n      try {\n        setIsLoading(true);\n        \n        // Fetch total count\n        const { count, error: countError } = await supabase\n          .from('products')\n          .select('*', { count: 'exact', head: true });\n\n        if (countError) {\n          console.error('Error fetching count:', countError.message);\n          toast.error('Failed to load total count');\n          return;\n        }\n\n        setTotalCount(count || 0);\n\n        // Fetch paginated data\n        const { data, error } = await supabase\n          .from('products')\n          .select('*')\n          .range(page * itemsPerPage, (page + 1) * itemsPerPage - 1)\n          .order('productid', { ascending: true });\n        \n        if (error) {\n          console.error('Error fetching products:', error.message);\n          toast.error('Failed to load products');\n          return;\n        }\n\n        if (mounted) {\n          setProducts(data || []);\n          setIsLoading(false);\n        }\n      } catch (err) {\n        console.error('Unexpected error:', err);\n        toast.error('An unexpected error occurred');\n      } finally {\n        if (mounted) {\n          setIsLoading(false);\n        }\n      }\n    }\n\n    fetchProducts();\n\n    return () => {\n      mounted = false;\n    };\n  }, [page]);\n\n  // Add product handler\n  async function handleAddProduct(productData) {\n    setIsAddingProduct(true);\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .insert([productData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error adding product:', error.message);\n        toast.error('Failed to add product');\n        return;\n      }\n\n      toast.success('Product added successfully');\n      \n      // Update total count\n      setTotalCount(prev => prev + 1);\n      \n      // If we're on the first page, update the products list\n      if (page === 0) {\n        setProducts(prev => {\n          const newProducts = [data, ...prev];\n          if (newProducts.length > itemsPerPage) {\n            newProducts.pop(); // Remove last item if we've exceeded items per page\n          }\n          return newProducts;\n        });\n      }\n\n      // Close modal and reset form\n      setAddModal(false);\n    } catch (err) {\n      console.error('Unexpected error during add:', err);\n      toast.error('An unexpected error occurred');\n    } finally {\n      setIsAddingProduct(false);\n    }\n  }\n\n  // Delete handler\n  async function handleDelete(product) {\n    setDeleteModal({ isOpen: true, product });\n  }\n\n  async function deleteProduct(id) {\n    try {\n      const { error } = await supabase.from('products').delete().eq('productid', id);\n      if (error) {\n        console.error('Delete error:', error.message);\n        toast.error('Failed to delete product');\n        return;\n      }\n      setProducts(products.filter(p => p.productid !== id));\n      toast.success('Product deleted successfully');\n      setDeleteModal({ isOpen: false, product: null });\n      \n      // Update total count\n      setTotalCount(prev => prev - 1);\n      \n      // If we're on the last page and it's now empty, go to previous page\n      if (products.length === 1 && page > 0) {\n        setPage(prev => prev - 1);\n      }\n    } catch (err) {\n      console.error('Unexpected error during delete:', err);\n      toast.error('An unexpected error occurred');\n    }\n  }\n\n  // Edit handler\n  const handleEdit = async (productId, editedData) => {\n    if (!productId) {\n      setEditingId(null);\n      setIsEditing(false);\n      return;\n    }\n\n    if (!editedData) {\n      setEditingId(productId);\n      setIsEditing(true);\n      return;\n    }\n\n    // Validate the edited data\n    const { isValid } = validateProductData(editedData);\n    if (!isValid) {\n      toast.error('Please fix the validation errors');\n      return;\n    }\n\n    // Show confirmation modal\n    setEditModal({ isOpen: true, productId, data: editedData });\n  };\n\n  // Handle edit confirmation\n  const handleEditConfirm = async () => {\n    const { productId, data: editedData } = editModal;\n    setIsEditing(true);\n\n    try {\n      const { error } = await supabase\n        .from('products')\n        .update(editedData)\n        .eq('productid', productId);\n\n      if (error) {\n        throw error;\n      }\n\n      // Update local state\n      setProducts(prev =>\n        prev.map(p =>\n          p.productid === productId ? { ...p, ...editedData } : p\n        )\n      );\n\n      toast.success('Product updated successfully');\n      setEditingId(null);\n      setEditModal({ isOpen: false, productId: null, data: null });\n    } catch (error) {\n      console.error('Error updating product:', error);\n      toast.error('Failed to update product');\n    } finally {\n      setIsEditing(false);\n    }\n  };\n\n  // Generate page numbers\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    for (let i = 0; i < totalPages; i++) {\n      pageNumbers.push(i);\n    }\n    return pageNumbers;\n  };\n\n  return (\n    <div className=\"p-6 max-w-5xl mx-auto\">\n      <Toaster position=\"top-right\" />\n      <Modal\n        isOpen={deleteModal.isOpen}\n        onClose={() => setDeleteModal({ isOpen: false, product: null })}\n        onConfirm={() => deleteProduct(deleteModal.product?.productid)}\n        title=\"Confirm Deletion\"\n        message={`Are you sure you want to delete \"${deleteModal.product?.productname}\"? This action cannot be undone.`}\n        confirmText=\"Delete\"\n        confirmStyle=\"bg-red-600 hover:bg-red-700\"\n      />\n\n      <Modal\n        isOpen={editModal.isOpen}\n        onClose={() => {\n          setEditModal({ isOpen: false, productId: null, data: null });\n          setEditingId(null);\n        }}\n        onConfirm={handleEditConfirm}\n        title=\"Confirm Edit\"\n        message=\"Are you sure you want to save these changes?\"\n        confirmText=\"Save Changes\"\n        confirmStyle=\"bg-green-600 hover:bg-green-700\"\n      />\n      \n      <AddProductModal\n        isOpen={addModal}\n        onClose={() => setAddModal(false)}\n        onAdd={handleAddProduct}\n        isLoading={isAddingProduct}\n      />\n      \n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-3xl font-bold text-rose-700\">Product List</h2>\n        <button\n          onClick={() => setAddModal(true)}\n          className=\"px-4 py-2 bg-rose-600 text-white rounded hover:bg-rose-700 transition-colors\"\n        >\n          Add Product\n        </button>\n      </div>\n  \n      {isLoading ? (\n        <p className=\"text-gray-500\">Loading products...</p>\n      ) : products.length === 0 ? (\n        <p className=\"text-gray-500\">No products found.</p>\n      ) : (\n        <>\n          <ProductTable\n            products={products}\n            onDelete={handleDelete}\n            onEdit={handleEdit}\n            isEditing={isEditing}\n            editingId={editingId}\n          />\n          \n          {/* Pagination Controls */}\n          <div className=\"flex flex-col items-center gap-4 mt-4\">\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => setPage(p => Math.max(0, p - 1))}\n                disabled={page === 0}\n                className={`px-3 py-1 rounded ${\n                  page === 0\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Previous\n              </button>\n              \n              {getPageNumbers().map((pageNum) => (\n                <button\n                  key={pageNum}\n                  onClick={() => setPage(pageNum)}\n                  className={`px-3 py-1 rounded ${\n                    page === pageNum\n                      ? 'bg-rose-600 text-white'\n                      : 'bg-gray-100 hover:bg-gray-200'\n                  }`}\n                >\n                  {pageNum + 1}\n                </button>\n              ))}\n\n              <button\n                onClick={() => setPage(p => p + 1)}\n                disabled={page >= totalPages - 1}\n                className={`px-3 py-1 rounded ${\n                  page >= totalPages - 1\n                    ? 'bg-gray-200 cursor-not-allowed'\n                    : 'bg-rose-600 text-white hover:bg-rose-700'\n                }`}\n              >\n                Next\n              </button>\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              Showing {page * itemsPerPage + 1} to {Math.min((page + 1) * itemsPerPage, totalCount)} of {totalCount} items\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Products;\n",
  "utils/formatters.js": "export const formatPrice = (price) => {\n  return typeof price === 'number' ? `$${price.toFixed(2)}` : 'N/A';\n};\n\nexport const validateProductData = (data) => {\n  const errors = {};\n  \n  if (!data.productname?.trim()) {\n    errors.productname = 'Product name is required';\n  }\n  if (!data.category?.trim()) {\n    errors.category = 'Category is required';\n  }\n  if (!data.price || isNaN(data.price) || Number(data.price) <= 0) {\n    errors.price = 'Valid price is required';\n  }\n  if (!data.stockquantity || isNaN(data.stockquantity) || Number(data.stockquantity) < 0) {\n    errors.stockquantity = 'Valid stock quantity is required';\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n}; "
}